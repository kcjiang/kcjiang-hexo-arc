<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Markdown 语法简介</title>
      <link href="posts/b9b22c0b/"/>
      <url>posts/b9b22c0b/</url>
      
        <content type="html"><![CDATA[<p>Markdown 是一种「电子邮件」风格的「标记语言」，在此强烈推荐所有写作者(不仅限于码农)学习和掌握该语言。</p><blockquote><p>前言：最初接触到markdown是在notepad++和从dropbox的paper中，发现这种写作格式不用排版且可读性极强，并且作为纯文本兼容性极强，可以用任何文本编辑器打开，还可以完美转换为 Word、PDF、HTML、Latex等格式。</p><p>Note：如果你接触过Latex和Lyx，那么你一定会爱上Markdown的语法，在我看来Markdown可以粗略认为是介于Lyx和Latex之间的一种格式，自由度、美观性、排版效率介于二者之间，不需要像Latex那样引用一大堆的package才能达到很好看的效果，也不像Lyx一样自由度过低，效率高但美观不足，同时Markdown的编译用时几乎可以忽略。</p></blockquote><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-常见误解纠正"><a href="#1-1-常见误解纠正" class="headerlink" title="1.1 常见误解纠正"></a>1.1 常见误解纠正</h3><ul><li>Markdown 发布的成品是完全由标点符号标签组成的纯文本。</li><li>Markdown 不限制编辑器，只是一种文本格式。</li></ul><h3 id="1-2-推荐Markdown编辑器"><a href="#1-2-推荐Markdown编辑器" class="headerlink" title="1.2 推荐Markdown编辑器"></a>1.2 推荐Markdown编辑器</h3><ul><li><p>  常见的专业Markdown编辑器<sup class="footnote-ref"><a href="#fn1">[1]</a></sup>有RoamResearch，Obsidian，Remnote，Typora等。</p></li><li><p>上述编辑器各有优劣，由于篇幅原因，详细对比请移步<a href="https://zhuanlan.zhihu.com/p/149401362">Denie的知乎专栏</a>查看，在此仅列出受诟病最多的缺点。</p><ul><li>  RoamResearch 收费15$/月</li><li>  Obsidian 没有大纲和云存储</li><li>  Remnote 没有Graph View</li><li>  Typora 只支持标题级别的引用</li></ul></li><li><p>  各位可视情况酌情使用，个人相对推荐Typora。</p></li></ul><h3 id="1-3-可扩展-HTML-语法"><a href="#1-3-可扩展-HTML-语法" class="headerlink" title="1.3 可扩展 HTML 语法"></a>1.3 可扩展 HTML 语法</h3><ul><li>  HTML 是一种<strong>发布格式</strong>，等同于pdf、tex、docx文件。</li><li>  Markdown 是一种<strong>创作格式</strong>，等同于latex语法(但简单得多)。</li><li>  Markdown 语法集合是HTML标签的一个子集。</li><li>  对于 Markdown 中未包含的标签, 可以直接使用 HTML标签，例如用 HTML <code>&amp;lt;span&amp;gt;</code> 标签替代 Markdown 的链接语法。</li></ul><h3 id="1-4-特殊字符转义"><a href="#1-4-特殊字符转义" class="headerlink" title="1.4 特殊字符转义"></a>1.4 特殊字符转义</h3><p>在 HTML 中, 有两个字符需要特殊对待: &lt; 和 &amp;，左尖括号用于起始标签。如果你想将它们用作字面量, 你必须将它们转义为字符实体, 例如<code>&amp;amp;lt;</code> 和 <code>&amp;amp;amp;</code>。</p><h2 id="二、行内语法讲解"><a href="#二、行内语法讲解" class="headerlink" title="二、行内语法讲解"></a>二、行内语法讲解</h2><h3 id="2-2-分级标题、任务列表"><a href="#2-2-分级标题、任务列表" class="headerlink" title="2.2 分级标题、任务列表"></a>2.2 分级标题、任务列表</h3><ul><li><p><strong>分级标题</strong></p><p>  注意#后面的空格</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 三级标题</span><span class="token title important"><span class="token punctuation">####</span> 四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 五级标题</span><span class="token title important"><span class="token punctuation">######</span> 六级标题 （最多支持6级标题）</span></code></pre><p>  由于用了标记编辑器会把所有标题写到目录大纲中，在这里写的演示标题也会列进去，所以就不演示了。可以在编辑器中观察，很简单，一级标题字号最大，依级递减。</p></li><li><p><strong>任务列表</strong></p><p>  Markdown 语法：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> [ ] 任务一 未做任务<span class="token list punctuation">-</span> [x] 任务二 已做任务</code></pre><p>  效果如下：</p><ul><li><input disabled="" type="checkbox"> 任务一 未做任务</li><li><input checked="" disabled="" type="checkbox"> 任务二 已做任务</li></ul></li></ul><h3 id="2-3-缩进、换行、空行、对齐方式"><a href="#2-3-缩进、换行、空行、对齐方式" class="headerlink" title="2.3 缩进、换行、空行、对齐方式"></a>2.3 缩进、换行、空行、对齐方式</h3><ul><li><p><strong>首行缩进</strong></p><p>  不同特殊占位符所占空白是不一样大的。</p><pre class=" language-markdown"><code class="language-markdown">【1】 <span class="token entity" title="&amp;">&amp;amp;</span>emsp;或<span class="token entity" title="&amp;">&amp;amp;</span>#8195; //全角【2】 <span class="token entity" title="&amp;">&amp;amp;</span>ensp;或<span class="token entity" title="&amp;">&amp;amp;</span>#8194; //半角【3】 <span class="token entity" title="&amp;">&amp;amp;</span>nbsp;或<span class="token entity" title="&amp;">&amp;amp;</span>#160;  //半角之半角</code></pre></li><li><p><strong>换行</strong></p><p>  由于markdown编辑器的不同,可能在一行字后面，直接换行回车，也能实现换行，但是在Visual Studio Code上，想要<strong>换行必须得在一行字后面空两个格子才行</strong>。</p></li><li><p><strong>空行</strong></p><p>  在编辑的时候有多少个空行(只要这一行只有回车或者space没有其他的字符就算空行)，在<strong>渲染之后，只隔着一行</strong>。</p></li><li><p><strong>对齐方式</strong></p><p>  代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span> 行中心对齐 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>&lt;p align= left>行左对齐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>&lt;p align= right>行右对齐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>  显示效果：</p>  <center> 行中心对齐 </center>  <p align= left>行左对齐</p>  <p align= right>行右对齐</p><h3 id="2-4-斜体、粗体、删除线、下划线、背景高亮"><a href="#2-4-斜体、粗体、删除线、下划线、背景高亮" class="headerlink" title="2.4 斜体、粗体、删除线、下划线、背景高亮"></a>2.4 斜体、粗体、删除线、下划线、背景高亮</h3></li><li><p>代码：</p><pre class=" language-html"><code class="language-html">*斜体* 或 _斜体_**粗体*****加粗斜体***~~删除线~~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mark</span><span class="token punctuation">></span></span>背景高亮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mark</span><span class="token punctuation">></span></span></code></pre></li><li><p>显示效果：</p><p>  <em>斜体</em><br>  <strong>粗体</strong><br>  <em><strong>加粗斜体</strong></em><br>  <del>删除线</del><br>  <u>下划线</u><br>  <mark>背景高亮</mark></p><h3 id="2-5-超链接、页内链接、自动链接、注脚"><a href="#2-5-超链接、页内链接、自动链接、注脚" class="headerlink" title="2.5 超链接、页内链接、自动链接、注脚"></a>2.5 超链接、页内链接、自动链接、注脚</h3></li><li><p><strong>行内式</strong></p><p>  语法说明：</p><p>  []里写链接文字，()里写链接地址, ()中的&quot;&quot;中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字，链接地址与title前有一个空格。（<mark>按住Ctrl + LeftClick可以访问超链接</mark>）</p><p>  注意在网页前必须要加<code>https://</code>，如果不加<code>https://</code>，表示直接访问本地目录文件</p><p>  代码：</p><pre class=" language-markdown"><code class="language-markdown">欢迎阅读<span class="token url">[Kimtanyo的个人博客](https://kimtanyo.github.io <span class="token string">"kimtanyo blog"</span>)</span>内容我保存为了<span class="token url">[本地文件](D:/自我鉴定.docx)</span></code></pre><p>  显示效果：</p><p>  欢迎阅读 <a href="https://kimtanyo.github.io/" title="kimtanyo blog">Kimtanyo的个人博客</a></p><p>  内容我保存为了<a href="D:/%E8%87%AA%E6%88%91%E9%89%B4%E5%AE%9A.docx">本地文件</a></p></li><li><p><strong>参考式</strong></p><p>  参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p><p>  语法说明：</p><p>  参考式链接分为两部分，文中的写法 <code>[链接文字][链接标记]</code>，在文本的任意位置添加<code>[链接标记]:链接地址</code>。</p><p>  如果链接文字本身可以做为链接标记，你也可以写成<code>[链接文字][]</code></p><p>  <code>[链接文字]:链接地址</code>的形式，见代码的最后一行。</p><p>  代码：</p><pre><code>我经常去的几个网站[Google][1]、[Leanote][2]。[1]:http://www.google.com[2]:http://www.leanote.com</code></pre><p>  显示效果：</p><p>  我经常去的几个网站<a href="https://links.jianshu.com/go?to=http://www.google.com">Google</a>、<a href="https://links.jianshu.com/go?to=http://www.leanote.com">Leanote</a>。</p></li><li><p><strong>注脚</strong></p><p>  语法说明：</p><p>  在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</p><p>  注意：经测试<mark>注脚与注脚之间必须空一行</mark>，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会<mark>自动归类到文章的最后</mark>。</p><p>  代码：</p><pre class=" language-markdown"><code class="language-markdown">使用 Markdown[^2]可以效率的书写文档, 直接转换成 HTML[^3]。[^2]:Markdown是一种纯文本标记语言[^3]:HyperText Markup Language 超文本标记语言</code></pre><p>  显示效果：</p><p>  使用 Markdown[^2]可以效率的书写文档, 直接转换成 HTML[^3]。<br>  [^2]:Markdown是一种纯文本标记语言<br>  [^3]:HyperText Markup Language 超文本标记语言</p><p>  注：脚注自动被搬运到最后面，请到文章末尾查看，脚注后方的链接可以直接跳转回到加注的地方。</p></li><li><p><strong>锚点（页内超链接）</strong></p><p>  网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的，Typora只支持在标题后插入锚点，其它地方无效。</p><p>  代码：</p>  <pre>`## &lt;span id=&quot;1&quot;&gt;一、概述&lt;/span&gt;  跳转到[概述](#1)  `</pre><p>  显示效果：</p><p>  跳转到<a href="#1">概述</a></p></li><li><p><strong>自动链接</strong></p><p>  语法说明：</p><p>  Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><p>  代码：</p>  <pre>`&amp;lt;http://example.com/ &amp;gt;  &amp;lt;address@example.com&amp;gt;  `</pre><p>  显示效果：</p><p>  &lt;<a href="http://example.com/">http://example.com/</a> &gt;</p><p>  &lt;<a href="mailto:&#97;&#100;&#x64;&#114;&#101;&#x73;&#x73;&#x40;&#101;&#120;&#97;&#109;&#112;&#108;&#x65;&#46;&#99;&#111;&#109;">&#97;&#100;&#x64;&#114;&#101;&#x73;&#x73;&#x40;&#101;&#120;&#97;&#109;&#112;&#108;&#x65;&#46;&#99;&#111;&#109;</a>&gt;</p><h3 id="2-6-无序列表、有序列表、定义型列表"><a href="#2-6-无序列表、有序列表、定义型列表" class="headerlink" title="2.6 无序列表、有序列表、定义型列表"></a>2.6 无序列表、有序列表、定义型列表</h3></li><li><p><strong>无序列表</strong><br>  使用 *，+，- 表示无序列表。<br>  代码：</p>  <pre>`* 无序列表项 一  + 无序列表项 二  - 无序列表项 三  `</pre><p>  显示效果：</p></li><li><p>  无序列表项 一</p></li><li><p>  无序列表项 二</p></li><li><p>  无序列表项 三</p></li><li><p><strong>有序列表</strong></p><p>  有序列表则使用数字接着一个英文句点，注意标题无法形成列表，只能手动添加。</p><p>  标题编号可通过<a href="https://www.cnblogs.com/Higurashi-kagome/p/12747857.html">MdAutoNumber.py</a>自动添加</p><p>  代码：</p>  <pre>`1. 有序列表项 一  2. 有序列表项 二  3. 有序列表项 三  `</pre><p>  显示效果：</p></li></ul><ol><li> 有序列表项 一</li><li> 有序列表项 二</li><li> 有序列表项 三</li></ol><ul><li><p><s><strong>定义型列表</strong></s></p><p><s>语法说明：</s></p><blockquote><p><s>定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab)</s></p></blockquote><p><s>代码</s></p><pre>`:   轻量级文本标记语言（左侧有一个可见的冒号和四个不可见的空格）`</pre><p><s>显示效果：</s></p><p><s>Markdown</s></p><p><s>:   轻量级文本标记语言，可以转换成html，pdf等格式</s></p><h3 id="2-7-插入图像"><a href="#2-7-插入图像" class="headerlink" title="2.7 插入图像"></a>2.7 插入图像</h3><p>语法中<mark>图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片</mark>。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。</p><p>Markdown 语法：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 图片居左题注居中<span class="token comment" spellcheck="true">&lt;!--格式: ![图片Alt](图片地址 "图片Title")--></span>  <span class="token url">![图片描述](http://zh.mweb.im/asset/img/set-up-git.gif <span class="token string">"图片Title"</span>)</span><span class="token list punctuation">2.</span> 图片和题注居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token url">![图片描述](https://jkc.icu/main_logo.png)</span></code></pre><p>效果如下：<br><img src="https://jkc.icu/main_logo.png" alt="图片描述" title="图片Title"></p><div align="center"> ![图片描述](https://jkc.icu/main_logo.png "11") </div><h3 id="2-8-多级引用"><a href="#2-8-多级引用" class="headerlink" title="2.8 多级引用"></a>2.8 多级引用</h3><p>语法说明：</p><p>引用需要在被引用的文本前加上&gt;符号和空格，允许多层嵌套，也允许你偷懒只在整个段落的第一行最前面加上 &gt; 。</p><p>代码：</p><pre>`&gt;&gt;&gt; 请问 Markdwon 怎么用？ - 小白&gt;&gt; 自己看教程！ - 愤青&gt; 教程在哪？ - 小白`</pre><p>显示效果：</p><blockquote><blockquote><blockquote><p>请问 Markdwon 怎么用？ - 小白<br>自己看教程！ - 愤青<br>教程在哪？ - 小白</p></blockquote></blockquote></blockquote><h3 id="2-9-转义字符、字体、字号、颜色"><a href="#2-9-转义字符、字体、字号、颜色" class="headerlink" title="2.9 转义字符、字体、字号、颜色"></a>2.9 转义字符、字体、字号、颜色</h3></li><li><p><strong>转义字符</strong></p><p>  Markdown中的转义字符为\，转义的有：</p><p>  \ 反斜杠 ` 反引号 * 星号 _ 下划线 {} 大括号 [] 中括号 () 小括号  # 井号 + 加号 - 减号 . 英文句号 ! 感叹号</p></li><li><p><strong>字体、字号、颜色</strong></p><p>  代码：</p>  <pre>`&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;  &lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;  &lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;  &lt;font color=#0099ff size=12 face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;  &lt;font color=gray size=5&gt;gray&lt;/font&gt;  &lt;font color=#00ffff size=3&gt;null&lt;/font&gt;  `</pre><p>  显示效果：</p><p>  <font face="黑体">我是黑体字</font></p><p>  <font face="微软雅黑">我是微软雅黑</font></p><p>  <font face="STCAIYUN">我是华文彩云</font></p><p>  <font color=#0099ff size=12 face="黑体">黑体</font></p><p>  <font color=gray size=5>gray</font></p><p>  <font color=#00ffff size=3>null</font></p><h2 id="三、块语法讲解"><a href="#三、块语法讲解" class="headerlink" title="三、块语法讲解"></a>三、块语法讲解</h2><h3 id="3-1-内容目录"><a href="#3-1-内容目录" class="headerlink" title="3.1 内容目录"></a>3.1 内容目录</h3><p>  在段落中填写 [TOC] 以显示全文内容的目录结构。</p>  <pre>`[TOC]  `</pre><p>  效果如下。</p><p>  [TOC]</p><p>  <mark>此处可能由于Gridea解析器不支持此写法无法正确显示目录</mark></p><p>  <mark>欲查看请在Typora或其他支持此写法的编辑器内自行尝试</mark></p><h3 id="3-2-代码块"><a href="#3-2-代码块" class="headerlink" title="3.2 代码块"></a>3.2 代码块</h3><p>  对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用“`”符号（一般在ESC键下方）包裹代码。</p></li><li><p><strong>行内式</strong></p><p>  代码：</p>  <pre>`C语言里的函数 `scanf()` 怎么使用？  `</pre><p>  显示效果：</p><p>  C语言里的函数 <code>scanf()</code> 怎么使用？</p></li><li><p><strong>缩进式多行代码</strong></p><p>  缩进 4 个空格或是 1 个制表符</p><p>  一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>  代码：</p>  <pre>`#include &amp;lt;stdio.h&amp;gt;  int main(void)  {      printf(&amp;#34;Hello world\n&amp;#34;);  }  `</pre><p>  显示效果：</p>  <pre>`#include &amp;lt;stdio.h&amp;gt;  int main(void)  {      printf(&amp;#34;Hello world\n&amp;#34;);  }  `</pre></li><li><p><strong>用六个`包裹多行代码</strong></p><p>  代码：</p>  <pre>`、、、  include &lt;stdio.h&gt;  int main(void)  {  printf(&quot;Hello world\n&quot;);  }  、、、  `</pre><p>  <strong>显示效果：</strong></p>  <pre>`include &lt;stdio.h&gt;  int main(void)  {  printf(&quot;Hello world\n&quot;);  }  `</pre><h3 id="3-3-流程图"><a href="#3-3-流程图" class="headerlink" title="3.3 流程图"></a>3.3 流程图</h3><p>  流程图的编译语言有mermaid和flow，但不推荐在markdown里直接做复杂的流程图，建议用Tableau或Visio等专业绘图软件，故语法在此不过多赘述，只做简单演示，代码：</p>  <pre>````  graph LR  A--&gt;B  ```  ```  sequenceDiagram  A-&gt;&gt;B: How are you?  B-&gt;&gt;A: Great!  ```  ```  flow  st=&gt;start: Start|past:&gt;http://blog.xiaoyulive.top  e=&gt;end: End:&gt;http://www.xiaoyulive.top  op1=&gt;operation: My Operation|past  op2=&gt;operation: Stuff|current  sub1=&gt;subroutine: My Subroutine|invalid  cond=&gt;condition: Yes or No?|approved:&gt;https://github.com/quanzaiyu  c2=&gt;condition: Good idea|rejected  io=&gt;inputoutput: catch something...|request  st-&gt;op1(right)-&gt;cond  cond(yes, right)-&gt;c2  cond(no)-&gt;sub1(left)-&gt;op1  c2(yes)-&gt;io-&gt;e  c2(no)-&gt;op2-&gt;e  ```  `</pre><p>  显示效果：</p><p>  <mark>此处可能由于Gridea解析器不支持mermaid和flow从而无法正确显示图片</mark></p><p>  <mark>欲查看流程图请复制代码到Typora或其他支持解析的编辑器内渲染</mark></p>  <pre>`graph LR  A--&gt;B  `</pre>  <pre>`sequenceDiagram  A-&gt;&gt;B: How are you?  B-&gt;&gt;A: Great!  `</pre>  <pre>`flow  st=&gt;start: Start|past:&gt;http://blog.xiaoyulive.top  e=&gt;end: End:&gt;http://www.xiaoyulive.top  op1=&gt;operation: My Operation|past  op2=&gt;operation: Stuff|current  sub1=&gt;subroutine: My Subroutine|invalid  cond=&gt;condition: Yes or No?|approved:&gt;https://github.com/quanzaiyu  c2=&gt;condition: Good idea|rejected  io=&gt;inputoutput: catch something...|request  st-&gt;op1(right)-&gt;cond  cond(yes, right)-&gt;c2  cond(no)-&gt;sub1(left)-&gt;op1  c2(yes)-&gt;io-&gt;e  c2(no)-&gt;op2-&gt;e  `</pre><h3 id="3-4-表格"><a href="#3-4-表格" class="headerlink" title="3.4 表格"></a>3.4 表格</h3><p>  语法说明：</p><p>  不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。</p><p>  列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。</p><p>  第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。</p><p>  <code>-</code> 左对齐， <code>:-:</code> 中心对齐，<code>-:</code> 右对齐</p><p>  在<a href="#3.7">HTML原始码</a>里面有非原生方式的另一种表格写法（复杂表格推荐）。</p><p>  表格代码：</p>  <pre>`|学号|姓名|序号|  |-|:-:|-:|  |小明明|男|5|  |小红|女|79|  |小陆|男|192|  `</pre><p>  原生方式写表格：</p>   <center>  <table>  <thead>  <tr>  <th>学号</th>  <th style="text-align:center">姓名</th>  <th style="text-align:right">序号</th>  </tr>  </thead>  <tbody>  <tr>  <td>小明明</td>  <td style="text-align:center">男</td>  <td style="text-align:right">5</td>  </tr>  <tr>  <td>小红</td>  <td style="text-align:center">女</td>  <td style="text-align:right">79</td>  </tr>  <tr>  <td>小陆</td>  <td style="text-align:center">男</td>  <td style="text-align:right">192</td>  </tr>  </tbody>  </table>  </center><h3 id="3-5-LaTeX-公式"><a href="#3-5-LaTeX-公式" class="headerlink" title="3.5 LaTeX 公式"></a>3.5 LaTeX 公式</h3></li><li><p><strong>表示行内公式</strong></p><p>  代码：</p>  <pre>`质能守恒方程可以用一个很简洁的方程式 `$E = mc^2 $`来表达。  `</pre><p>  显示效果：</p><p>  质能守恒方程可以用一个很简洁的方程式 $E = mc^2 $来表达。</p></li><li><p><strong>表示整行公式</strong><br>  大部分的浏览器支持</p>  <pre>`$$      公式  $$  `</pre><p>  有道云笔记 使用格式，</p>  <pre>````math  公式  ```  `</pre><p>  块级公式：</p>  <pre>`$$      x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a}   $$  $$  [\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =  1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}  {1+\frac{e^{-8\pi}} {1+\ldots} } } }]  $$  `</pre><p>  显示效果：</p><p>  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mo>−</mo><mi>b</mi><mo>±</mo><msqrt><mrow><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></msqrt></mrow><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a}<br>  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.276389em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.590389em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,  -10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,  -50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,  35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,  -221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467  s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422  s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mfrac><mn>1</mn><mrow><mo fence="true">(</mo><msqrt><mrow><mi>ϕ</mi><msqrt><mn>5</mn></msqrt></mrow></msqrt><mo>−</mo><mi>ϕ</mi><mo fence="true">)</mo><msup><mi>e</mi><mrow><mfrac><mn>2</mn><mn>5</mn></mfrac><mi>π</mi></mrow></msup></mrow></mfrac><mo>=</mo><mn>1</mn><mo>+</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>2</mn><mi>π</mi></mrow></msup><mrow><mn>1</mn><mo>+</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>4</mn><mi>π</mi></mrow></msup><mrow><mn>1</mn><mo>+</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>6</mn><mi>π</mi></mrow></msup><mrow><mn>1</mn><mo>+</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>8</mn><mi>π</mi></mrow></msup><mrow><mn>1</mn><mo>+</mo><mo>…</mo></mrow></mfrac></mrow></mfrac></mrow></mfrac></mrow></mfrac><mo>]</mo></mrow><annotation encoding="application/x-tex">[\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =<br>  1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>  {1+\frac{e^{-8\pi}} {1+\ldots} } } }]<br>  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.01146em;vertical-align:-1.69002em;"></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mopen"><span class="delimsizing size2">(</span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.04139em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathdefault">ϕ</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,  -10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,  -50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,  35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,  -221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467  s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422  s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span><span style="top:-3.0013900000000002em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,  158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067  c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,  175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71  c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,  -252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26  s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19860999999999995em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">ϕ</span><span class="mclose"><span class="delimsizing size2">)</span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.93957em;"><span style="top:-3.3485500000000004em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">5</span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.38em;"><span class="pstrut" style="height:3.15em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.827em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.69002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.692383em;vertical-align:-2.201275em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.19358em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.91642em;"><span style="top:-2.4519800000000003em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0543142857142858em;"><span style="top:-2.229757142857143em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size1 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32544em;"><span style="top:-2.468em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="minner mtight">…</span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.387em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384399999999999em;"><span style="top:-2.93844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">8</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.61533em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size1 size6"></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384399999999999em;"><span style="top:-2.93844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">6</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2097642857142856em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">4</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3948549999999997em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.201275em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span></span></span></span></p><p>  访问 <a href="https://links.jianshu.com/go?to=https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p><h3 id="3-6-分隔线"><a href="#3-6-分隔线" class="headerlink" title="3.6 分隔线"></a>3.6 分隔线</h3><p>  你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><p>  代码：</p>  <pre>`* * *  ***  *****  - - -  -----------  `</pre><p>  显示效果都一样：</p><hr><hr><hr><hr><hr><h3 id="3-7-HTML原始码"><a href="#3-7-HTML原始码" class="headerlink" title="3.7 HTML原始码"></a><span id="3.7">3.7 HTML原始码</span></h3><p>  在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理，例如：</p><p>  <strong>代码：</strong></p>  <pre>`第一个例子：  &lt;div class=&quot;footer&quot;&gt;  © 2004 Foo Corporation  &lt;/div&gt;  第二个例子：  &lt;center&gt;  &lt;table&gt;  &lt;tr&gt;  &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;  &lt;th&gt;星期一&lt;/th&gt;  &lt;th&gt;星期二&lt;/th&gt;  &lt;th&gt;星期三&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;李强&lt;/td&gt;  &lt;td&gt;张明&lt;/td&gt;  &lt;td&gt;王平&lt;/td&gt;  &lt;/tr&gt;  &lt;/table&gt;  &lt;/center&gt;</li></ul><p>显示效果：</p><p>第一个例子：</p> <div class="footer"> © 2004 Foo Corporation </div><p>第二个例子：</p><center><table> <tr> <th rowspan="2">值班人员</th> <th>星期一</th> <th>星期二</th> <th>星期三</th> </tr> <tr> <td>李强</td> <td>张明</td> <td>王平</td> </tr> </table></center>### 3.8 特殊字符<center><table><thead><tr><th style="text-align:center">特殊字符</th><th style="text-align:center">描述</th><th style="text-align:center">字符的代码</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">空格符</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于号</td><td style="text-align:center">`&lt;`</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于号</td><td style="text-align:center">`&gt;`</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">和号</td><td style="text-align:center">`&amp;`</td></tr><tr><td style="text-align:center">￥</td><td style="text-align:center">人民币</td><td style="text-align:center">`¥`</td></tr><tr><td style="text-align:center">©</td><td style="text-align:center">版权</td><td style="text-align:center">`©`</td></tr><tr><td style="text-align:center">®</td><td style="text-align:center">注册商标</td><td style="text-align:center">`®`</td></tr><tr><td style="text-align:center">°C</td><td style="text-align:center">摄氏度</td><td style="text-align:center">`°C`</td></tr><tr><td style="text-align:center">±</td><td style="text-align:center">正负号</td><td style="text-align:center">`±`</td></tr><tr><td style="text-align:center">×</td><td style="text-align:center">乘号</td><td style="text-align:center">`×`</td></tr><tr><td style="text-align:center">÷</td><td style="text-align:center">除号</td><td style="text-align:center">`÷`</td></tr><tr><td style="text-align:center">²</td><td style="text-align:center">平方（上标²）</td><td style="text-align:center">`²`</td></tr><tr><td style="text-align:center">³</td><td style="text-align:center">立方（上标³）</td><td style="text-align:center">`³`</td></tr></tbody></table></center><hr><section class="footnotes"><ol><li><p> 这里仅列出那些以编辑markdown文本为主要功能的编辑器，其他的比如notepad++等由于不是为了编辑Markdown而专门开发的，所以在使用体验、可拓展性和美观性上较差，故不推荐。 <a href="#fnref1">↩︎</a></p></li><li><p> Markdown是一种纯文本标记语言 <a href="#fnref2">↩︎</a></p></li><li><p>HyperText Markup Language 超文本标记语言 <a href="#fnref3">↩︎</a></p> </section><pre><code>&lt;/div&gt;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Hexo </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/4a17b156/"/>
      <url>posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test Post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World2</title>
      <link href="posts/98975d7d/"/>
      <url>posts/98975d7d/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test Post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World10</title>
      <link href="posts/f1da163e/"/>
      <url>posts/f1da163e/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test Post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World3</title>
      <link href="posts/ef906deb/"/>
      <url>posts/ef906deb/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test Post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World4</title>
      <link href="posts/71f4f848/"/>
      <url>posts/71f4f848/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test Post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World1</title>
      <link href="posts/19e0cc7/"/>
      <url>posts/19e0cc7/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test Post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World5</title>
      <link href="posts/6f3c8de/"/>
      <url>posts/6f3c8de/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test Post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World6</title>
      <link href="posts/9ffa9964/"/>
      <url>posts/9ffa9964/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test Post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World9</title>
      <link href="posts/f4584f5/"/>
      <url>posts/f4584f5/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test Post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World8</title>
      <link href="posts/7842b463/"/>
      <url>posts/7842b463/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test Post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桌面端 Spotify 开启简体中文</title>
      <link href="posts/dda18cbc/"/>
      <url>posts/dda18cbc/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>虽然 3 月月底就有媒体报道 Spotify 为桌面端更新了 UI，使其更加接近移动端 UI，但我一直没有收到这样的更新。和很多朋友一样，上周末我终于用上了桌面端新 UI，大家的评价都还不错</p><p>其实，本次更新不仅带来了新 UI，还有和移动端设备一样的简体中文语言包。不过 Spotify 的语言选项中依然只有（繁体）中文这一个选择，今天和大家分享一下如何手动开启</p><p>👉 具体步骤：</p><p>① 保证 Spotify 为最新版本，并可以看到新 UI<br>② 找到 prefs 配置文件路径，其中 macOS 下为 /Users/${yourname}/Library/Application Support/Spotify/prefs，Windows 下为 C:\Users${yourname}\AppData\Roaming\Spotify\prefs<br>③ 使用文本编辑器对其进行编辑，找到 language 一项并将内容改为 zh-CN<br>④ 保存配置文件并重启 Spotify</p><p>👀 既然已经引入了简体中文语言包，相信 Spotify 不久之后也会提供对应的单独选项。经过本次更新，左栏的内容大大减少，顿时感觉清爽了不少。由于看惯了移动端，对于 Home 界面我也完全可以接受</p><p>辗转了几个平台后，虽然同时持有但我目前主要选择使用 Spotify，它的网络连接状况、曲库、推荐算法、功能等方面都比较令我满意。但移动端的歌词滚动方面还是不如 Apple Music，也希望桌面端能够早日引入歌词，桌面端行间距过大，亦不甚美观</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spotify </tag>
            
            <tag> 海外应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World7</title>
      <link href="posts/e8fda9f2/"/>
      <url>posts/e8fda9f2/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test Post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为 Hexo 创建本地搜索引擎</title>
      <link href="posts/a67ef931/"/>
      <url>posts/a67ef931/</url>
      
        <content type="html"><![CDATA[<p>自 2014 年，始终博客就开始使用 <a href="https://hexo.io/zh-cn/index.html">Hexo</a> 这个静态站点生成工具了；犹记得当时参考的文章，是 Bruce 的 <a href="http://ibruce.info/2013/11/22/hexo-your-blog/">Hexo 你的博客</a>。</p><p>始终博客采用的主题，是 <a href="https://github.com/iissnan/">iissan</a> 创建的 <a href="https://github.com/iissnan/hexo-theme-next">NexT</a>。NexT 主题默认提供了两个站内搜索解决方案：swiftype 和 tinysou。早年时候，始终博客采用了 swiftype 作为站内搜索方案；但后来因为 swiftype 改版而失效，就放弃了。</p><p>近期，随着始终博客的文章数量不断增加，陆续有友人建议应该为博客加上搜索功能。然而，出于几方面的考虑，我一直没有加上搜索功能：</p><ul><li>不愿意受限于第三方服务，第三方服务可能说变就变——曾经的各种博客网站，以及 swiftype 就是如此；</li><li>不喜欢第三方服务的样式，与博客样式脱节；</li><li>使用第三方服务，需要应用第三方的 JavaScript 脚本等内容，可能存在安全风险。</li></ul><p>经过检索之后，我发现 Hexo 已有可以接受的解决方案了。本文来介绍如何在 Hexo 博客中建立自己的本地搜索引擎。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>对于大型搜索引擎来说，在抓取并处理好网页之后，就要建立所谓的「倒排索引」了。所谓倒排索引，指的是以检索词的 term 为键，以包含该 term 的文档列表为值。如此一来，我们就可以根据检索词中的各个 term，获取若干列表。而后，对这些列表求交集，就能得到「包含检索词中所有 term」的文档了。</p><p>在个人网站上，特别是 Hexo 生成的静态站点，做类似的工作是不太容易的。这里原因有几点，分列如下</p><ul><li>Hexo 生成的是静态站点，因此无法利用服务器做数据库的存储和相关计算；</li><li>这就制约了倒排索引的存储和求交；</li><li>另外一方面，制作倒排索引的过程，需要应用完善的 NLP 分词，这一工程量相对巨大。</li></ul><p>考虑到我们无法在服务器上做数据库存储，我们就必须以文件的形式保存索引，让用户以浏览器下载该文件。此外，考虑到我们无法在服务器上做计算，我们就必须依赖可在浏览器上执行的代码，处理用户的检索任务。因此，我们说，仿照大型搜索引擎制作站内搜索，对于静态站点来说，是不现实的。</p><p>那么，我们可以怎样做呢？既然标准的方案无法达成，那我们就只能退而求其次。</p><p>首先，不管怎样「求其次」，都必须要有一个索引文件。这是因为，在索引文件当中进行各种操作，总是要比直接对网页页面进行操作来得要方便和快捷的。因此，首先我们需要一个能够嵌入 Hexo 的工具，方便地生成这样的索引文件。其次，有了索引，我们需要一个有效的算法：根据用户输入的检索词，返回包含检索词的文章列表。考虑到这样的算法需要在用户的浏览器上执行，我们选择使用 JavaScript 和 jQuery 来实现。接下来，为了与用户交互：接受检索词和返回结果；我们需要在页面的合适位置展示搜索框和输出结果。最后，还有一些细节问题需要处理。例如说，搜索框和输出结果的样式要如何设计；例如说，索引文件通常比较大，随页面一起下载会导致页面加载缓慢，要如何解决这个问题。</p><p>我们依次来解决这些问题。</p><h2 id="用-hexo-generator-search-生成索引"><a href="#用-hexo-generator-search-生成索引" class="headerlink" title="用 hexo-generator-search 生成索引"></a>用 <code>hexo-generator-search</code> 生成索引</h2><p>HaHack 参考 Christian Fei 的 <a href="https://github.com/christian-fei/Simple-Jekyll-Search">Simple Jekyll Search</a> 实现了名为 <code>hexo-generator-search</code> 的生成器。安装该生成器之后，在执行 <code>hexo generate</code> 的过程中，会按照配置生成一个 XML 文件，用于保存全站的文档数据。这个 XML 文件只是简单地做了数据的结构化存储，而完全没有考虑分词、倒排等问题。</p><p>安装 <code>hexo-generator-search</code> 非常简单，只需要在 Hexo 项目目录下执行下列命令即可。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-generator-search</code></pre><p>如此一来，我们只需在站点配置文件 <code>_config.yml</code> 当中写入如下配置，即可为全站的文档生成索引文件了。</p><pre class=" language-bash"><code class="language-bash">search:  path: search.xml  field: post</code></pre><p>具体来说，<code>hexo-generator-search</code> 会为全站所有 <code>post</code> 类型的页面生成结构化的数据，并保存在本站的 <code>/search.xml</code> 当中。若想让 <code>page</code> 类型的页面也纳入索引，则可以将 <code>field</code> 的值修改为 <code>all</code>。</p><h2 id="用-JavaScript-和-jQuery-实现检索算法"><a href="#用-JavaScript-和-jQuery-实现检索算法" class="headerlink" title="用 JavaScript 和 jQuery 实现检索算法"></a>用 JavaScript 和 jQuery 实现检索算法</h2><p>另外一方面，HaHack 建议以 jQuery 的文本匹配为基础，在前端界面上运行站内搜索。主要的处理流程是：</p><ul><li>载入 <code>search.xml</code>；</li><li>解析 <code>search.xml</code>；</li><li>解析检索词；</li><li>在索引中进行字符串匹配；</li><li>展现结果。</li></ul><p>我对官方的版本进行了少许的修改（后详），并加入了注释。这样应该相对比较好理解了。你可以在 <a href="https://github.com/Liam0205/hexo-search-plugin-snippets/blob/master/snippets/search.js">GitHub</a> 上看到我修改的版本。</p><blockquote><p>需要注意的是，<code>search.js</code> 依赖 jQuery。因此，你需要在引入 <code>search.js</code> 之前，引入 jQuery 的脚本。比如，你可以在 head 部分这样做：<code>&lt;script src=&quot;//cdn.bootcss.com/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code>。</p></blockquote><h2 id="在合适的位置展示搜索框"><a href="#在合适的位置展示搜索框" class="headerlink" title="在合适的位置展示搜索框"></a>在合适的位置展示搜索框</h2><p>接下来，我们需要在合适的位置，呈现一个搜索框。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>site-search-form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>local-search-input<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>st-search-input<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>local-search-result<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>local-search-result-cls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>此处，<code>local-search-input</code> 是一个输入框，用于接收用户输入的检索词；<code>local-search-result</code> 是用于展现搜索结果的 <code>div</code> 标签。这部分代码，我也已上传到 <a href="https://github.com/Liam0205/hexo-search-plugin-snippets/blob/master/snippets/search.swig">GitHub</a>。</p><h2 id="其他一些细节"><a href="#其他一些细节" class="headerlink" title="其他一些细节"></a>其他一些细节</h2><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>现在，我们已经有了索引文件、搜索算法和搜索框。但是，现在而言，搜索框是孤立的：用户在搜索框中输入内容，并不会触发搜索算法。换而言之，搜索函数并没有调用。因此，我们需要调用定义在 <code>search.js</code> 当中定义的 <code>searchFunc</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token string">"/search.xml"</span><span class="token punctuation">;</span><span class="token function">searchFunc</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'local-search-input'</span><span class="token punctuation">,</span> <span class="token string">'local-search-result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="在何时的时候触发搜索函数"><a href="#在何时的时候触发搜索函数" class="headerlink" title="在何时的时候触发搜索函数"></a>在何时的时候触发搜索函数</h3><p>像上面这样调用搜索函数，有一个潜在的问题。调用搜索函数时，首先会尝试载入并解析 <code>search.xml</code> 文件。这个文件包含了站点里所有博文的所有内容；因此，通常来说它的体积非常大。这样一来，如果不做任何限制，函数将在网页加载时被调用；因而，体积庞大的索引文件也将在网页加载的时候引入。这会导致网页整体加载的速度非常缓慢，对用户体验是一种伤害。</p><p>因此，我们会考虑，在激活搜索框时，我们才去调用搜索函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> inputArea       <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#local-search-input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inputArea<span class="token punctuation">.</span>onclick   <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">getSearchFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>此处，我们通过 <code>inputArea</code> 这个变量，监控搜索框的状态。只有当用户用鼠标点击搜索框时，才会触发 <code>getSearchFile</code> 函数，载入索引文件并执行 <code>searchFunc</code>。</p><blockquote><p><code>getSearchFile</code> 函数定义在 <code>search.js</code> 脚本当中了。</p></blockquote><p>不过，这还不够。因为，如此一来，每次用户点击搜索框时，都会触发一次 <code>searchFunc</code> 函数，并加载一次 <code>search.xml</code> 索引文件。我们期待的是，只有当用户第一次点击搜索框之后，才去下载索引文件；之后的搜索行为，直接复用上一次加载的文件即可。</p><p>为此，我们需要在执行好 <code>getSearchFile</code> 函数之后，禁用 <code>onclick</code> 时间的 handler。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> inputArea       <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#local-search-input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inputArea<span class="token punctuation">.</span>onclick   <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">getSearchFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="在搜索框中屏蔽回车"><a href="#在搜索框中屏蔽回车" class="headerlink" title="在搜索框中屏蔽回车"></a>在搜索框中屏蔽回车</h3><p>由于我们在搜索框中使用了 <code>input</code> 标签。这是一个表单，但我们不希望它具有一些表单的行为。例如说，我们的搜索结果是实时呈现的；我们不希望用户在输入检索词之后，误按回车键，导致页面刷新。</p><p>为此，我们可以这样做。</p><pre class=" language-javascript"><code class="language-javascript">inputArea<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="在加载索引文件时，给用户一个提示"><a href="#在加载索引文件时，给用户一个提示" class="headerlink" title="在加载索引文件时，给用户一个提示"></a>在加载索引文件时，给用户一个提示</h3><p>我们为了保护页面加载的速度，将加载索引文件的过程，后移到用户点击搜索框时进行。然而，如前所述，索引文件通常是比较大的；加载并解析索引文件通常会耗费不少时间。在这个过程中，用户可能已经输入了一些检索词；这些检索词，会因为尚未加载完毕索引文件，而得不到任何的检索结果。这当然是不合适的。</p><p>因此，我们需要在加载和解析索引文件的过程中，给用户一个清晰的提示。为此，我们需要修改 <code>search.js</code> 脚本。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> $resultContent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'local-search-result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$resultContent<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> BTN <span class="token operator">+</span> <span class="token string">"&lt;ul>&lt;span class='local-search-empty'>首次搜索，正在载入索引文件，请稍后……&lt;span>&lt;/ul>"</span><span class="token punctuation">;</span></code></pre><p>将这段代码放在加载和解析索引文件之前，就能在 <code>local-search-result</code> 中提示「正在载入索引文件」了。</p><h3 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h3><p>最后，我们可以通过样式表来控制这一系列内容的呈现形式。始终博客使用的样式表可以在 <a href="https://github.com/Liam0205/hexo-search-plugin-snippets/blob/master/snippets/search.stylus">GitHub</a> 上找到。</p><hr><p>做完了这些工作，就可以查看效果啦。始终博客的搜索框位于页面的右上角。</p><p>参考资料：</p><ul><li><a href="http://hahack.com/codes/local-search-engine-for-hexo/">http://hahack.com/codes/local-search-engine-for-hexo/</a></li><li><a href="http://moxfive.xyz/2016/05/31/hexo-local-search/">http://moxfive.xyz/2016/05/31/hexo-local-search/</a></li><li><a href="http://www.barretlee.com/blog/2017/06/04/hexo-search-insite/">http://www.barretlee.com/blog/2017/06/04/hexo-search-insite/</a></li><li><a href="https://github.com/barretlee/hexo-search-plugin-snippets">https://github.com/barretlee/hexo-search-plugin-snippets</a></li><li><a href="https://github.com/Liam0205/hexo-search-plugin-snippets">https://github.com/Liam0205/hexo-search-plugin-snippets</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是Log模式</title>
      <link href="posts/b9d53580/"/>
      <url>posts/b9d53580/</url>
      
        <content type="html"><![CDATA[<h4 id="【什么是-Log-模式？】为什么-LOG-风格的影片拥有更高动态范围-HDR-？"><a href="#【什么是-Log-模式？】为什么-LOG-风格的影片拥有更高动态范围-HDR-？" class="headerlink" title="【什么是 Log 模式？】为什么 LOG 风格的影片拥有更高动态范围(HDR)？"></a>【什么是 Log 模式？】为什么 LOG 风格的影片拥有更高动态范围(HDR)？</h4><p><img src="/images/articles7/651-log-profile-video-06.jpg" alt="正常与LOG Profile 影片比较"></p><h3 id="RAW-vs-LOG"><a href="#RAW-vs-LOG" class="headerlink" title="RAW vs LOG"></a>RAW vs LOG</h3><p>摄影师都知道 RAW 档保留了感光原件上的数据，也就是说 RAW 档已尽可能保留了影像的细节。可惜，只有拍摄照片时，才可使用 RAW 档。拍摄影片时，并没有 RAW 档这回事。那么，摄影师该如何保留更多影片的细节供后制之用？答案就是 LOG。</p><h3 id="S-LOG、C-LOG、Z-LOG、D-LOG，全部都是-LOG-影片"><a href="#S-LOG、C-LOG、Z-LOG、D-LOG，全部都是-LOG-影片" class="headerlink" title="S-LOG、C-LOG、Z-LOG、D-LOG，全部都是 LOG 影片"></a>S-LOG、C-LOG、Z-LOG、D-LOG，全部都是 LOG 影片</h3><p>几乎全部的高阶单反及无反（微单）都可拍摄影片，而相机总有一种或以上支援 LOG 模式的色彩风格(Profiles)。根据厂商的演算法，各品牌都有自家的 LOG 演算法，如 Sony 的 LOG 模式称为 S-LOG；Nikon 的叫作 Z-LOG；Canon 的是 C-LOG。数年前，只有高阶的摄录机及相机才支援 LOG 模式，现在连 DJI 的 Mavis Pro 航拍机及 Osmo Pocket 等拍摄工具都具备 LOG 模式。DJI 的 LOG 模式被名为 D-LOG。</p><p>相信大家都猜到 LOG 模式之所以普及，一定与影像质素有关。无可否认，以 LOG 模式拍摄出来的影片可拥有较高的动态范围(High Dynamic Range, HDR)，意味拥有更阔的曝光范围，及可保留更多色调。原理说起来很简单，如果大学是念数学及物理的，一听便会明了。LOG 模式的巧妙之处在于运用了数学上的 LOG(Logarithmic)函数来重新分配曝光值。</p><p>由此可见，LOG 的确是指数学上的 LOG(Logarithmic)曲线函数，并不是一种独立的影像格式或风格，而是格式或风格用上了 LOG 函数的转换。</p><h3 id="非线性-Non-Linear-的曝光"><a href="#非线性-Non-Linear-的曝光" class="headerlink" title="非线性(Non-Linear)的曝光"></a>非线性(Non-Linear)的曝光</h3><p>先来了解数码影像如何被记录。当光线透穿过镜头，聚焦于感光元件上，感光元件便会把每个像素的光量转化成电压(Voltage)。光量越大，电压越高。光线的强度是模拟(Analog)的，意思是连续的；而电压是数码的(Digital)。相机借着「模拟数码转换器(A/D Converter, ADC)」把光线的强度转成电压，再编成一个表示曝光量的数值。最后依所选的影片格式如 MPEG-4 等来编码及压缩。</p><p>以上的影像记录过程是线性的(Linear)，光线越强，数字化后的曝光值越大。摄录机、单反、无反和手机都预设以这种方法录制影片，影片才可于一般电视和电脑萤幕上有正常的反差。</p><p>这个传统的影像记录过程有个很大的缺点，就是它的记录方式是线性的，可惜曝光量却不是线性。把光圈从 f/5.6 调到 f/4，曝光增加了一级，但曝光量倍增了。再由 f/4 调到 f/2.8，曝光值再加一级，但曝光再被倍增。由 f/5.6 到 f/2.8 只是 2 级的曝光，但曝光量已增加了 4 倍。可以看到曝光本身不是线性的，而是更接近于对数(Logarithmic)的几何增长。</p><h3 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h3><p>或者大家的相机可以 10 位元(bits)或以上来记录颜色，但为了简化计算，假设相机的位元深度(Bit Depth)只是 8-bit，即只可以 8 位元来表达色彩。8 位元可以产生 256 (2 的 8 次方)个数值。换个话说，8 位元可以表达 256 个光度。以 0 表示最黑，而 255 表示最白。</p><p>感光元件的「模拟数码转换器(A/D Converter, ADC)」会把接收到的曝光量转成 0-255 的数值。让我们把曝光等级与相对明亮值绘在图表上。</p><p><img src="/images/articles7/651-log-profile-video-01.jpg" alt="曝光等级与明亮值关系图"></p><p>X 轴表示曝光等级，每增加一个等级，曝光量会增加一倍。假设相机的动态范围是 8 级，就在 X 轴列出 8 个曝光等级。Y 轴则表示每个曝光等级的光度(0-255)。</p><p>可有发现由 2 7 到 2 8 占用了 Y 轴的一半长度？全条 Y 轴的最大值是 255，而 2 8 减 2 7 已是 128。单是这段高光位已占了一半的位元深度(Bit Depth)。</p><p>最可笑是相机只用了 1/16 的位元深度(Bit Depth)来表达由 0 到 2 4，一共 4 级的明亮度。以 1/16 的 Y 轴来记录首 4 个曝光等级的明亮度，实在太「偏心」了吧！这也解释了数码相机对暗位处理为何如此差劣。</p><h3 id="LOG-就是解决办法"><a href="#LOG-就是解决办法" class="headerlink" title="LOG 就是解决办法"></a>LOG 就是解决办法</h3><p>之前说过「模拟数码转换器(A/D Converter, ADC)」把光度转成电压的过程是线性(Linear)的。只要在编码及压缩前，把曝光值套上 LOG 曲线函数，便可拉近各曝光等级所占用的位元深度(Bit Depth)。</p><p><img src="/images/articles7/651-log-profile-video-02.jpg" alt="曝光等级与明亮LOG 值关系图"></p><p>从上图可以看到各曝光等级都获得差不多的 Y 轴长度，即是大家的位元深度(Bit Depth)都差不多。解决了之前，相机花了超过一半的位元深度(Bit Depth)来记录最光一级的问题。</p><h3 id="LOG-的幅作用"><a href="#LOG-的幅作用" class="headerlink" title="LOG 的幅作用"></a>LOG 的幅作用</h3><p>指出 LOG 的幅作用前，先看正常模式，即线性保存影像的模样。</p><p><img src="/images/articles7/651-log-profile-video-03.jpg" alt="Sony HLG3 Profile 影片"></p><p>上图是平时按下录影键时所获得的影像。</p><p>但曝光值经过 LOG 函数转换后，以正常(非 HDR)萤幕观看影片的话，影像会被淡化。影像的反差和饱和度变得弱了。</p><p><img src="/images/articles7/651-log-profile-video-04.jpg" alt="正常影片"></p><p>上图是套用了 Sony A7 III 的 HLG3 风格的影像。HLG 3 是 Sony 一种运用了 LOG 曲线的风格。可见 LOG 影像在对比度和饱和度方面都较平(Flat)。留意暗位的地方，正常的影片上，栏杆的暗位黑漆漆一片。而 LOG 影片的栏杆依然保留了大量的暗位细节。再比较一下两者的天空，明显地，LOG 影片上的天空（光位）拥有较多的细节。</p><p>只要影像细节被保留下来，对比度或是饱和度都只是额外的后制工序。</p><p>为什么 LOG 曲线的应用最初只给高端的相机？使用 LOG 模式拍摄出来的影片，全都要进行调色(Color Grading)。没有谁喜欢色彩平淡的影片吧？厂商起初以为只有专业的摄影师才愿意花时间去调色，没想到摄影爱好者同样愿意花时间调色。</p><p>除非有朝一日，大部份观众都使用 HDR 萤幕，调色才会变成可有可无的步骤，因 HDR 显示装置能正确还原影片应有的对比和色彩。</p><p><img src="/images/articles7/651-log-profile-video-05.jpg" alt="Sony HLG3 Profile 影片"></p><p>以上是被调色(Color Graded)后的 LOG 影片。明显地，调色过的 LOG 影片依然比原影片保留了更多细节。</p><p>对 LOG 影片调色(Color Grading) 很讲求经验，否则只会一蹋糊涂。一旦掌握了，拍出来的影片将会去到另一个层次。现在很多对画质有追求的摄影师已使用支援 LOG 的颜色风格(Profiles)，如 Sony 的 S-LOG2、S-LOG3、CINE4、HLG3 等。注意，不同颜色 Profiles 对曝光的宽容度都不同。小编个人则偏爱 Sony 的 HLG3 Profile。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> S-log </tag>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语听力之五步精听法</title>
      <link href="posts/1f9cf6e7/"/>
      <url>posts/1f9cf6e7/</url>
      
        <content type="html"><![CDATA[<p>这里是凭回忆记录的赵东坡老师的「五步精听法」。这个方法是我很多年前在上 TOEFL iBT 培训时，从赵东坡老师处习得。</p><p>本文先讲怎么训练，然后解释为什么要这样训练。</p><h2 id="五步精听法"><a href="#五步精听法" class="headerlink" title="五步精听法"></a>五步精听法</h2><p>训练分为 5 步，需要的内容有两个：听力材料，听力材料对应的准确原文。</p><ol><li>播放一遍听力材料，不看原文，认真听；</li><li>打开听力原文，查找不认识的词和短语；</li><li>逐字句地翻译原文——必须成文，可以写在纸上或者打字放在电脑里，但不能口头翻译（「大概是这样就行了」是不行的）；</li><li>对照原文和译文，播放听力材料，落后听力原文三个单词做「影子跟读」，直到可以不看原文脱稿跟读；</li><li>在当天时间内（不一定要即时，但是要当天完成），认真听材料 20 遍，尝试根据听到的声音直接反应出对应的含义。</li></ol><h2 id="方法背后的原理"><a href="#方法背后的原理" class="headerlink" title="方法背后的原理"></a>方法背后的原理</h2><p>听力的最终目的是「听到声音就知道意思」。这就包括了两个步骤。首先是听到声音直到对方在说什么（英语，目标语言），这属于「听得清」的范畴；其次是知道对方说什么之后反应出对应的意思（中文，母语，思维语言）。</p><p>此外，因为听力是一个连续的过程，对这两个步骤还有「快」的要求。因为如果不够快，对方哗啦啦已经说到下一个话题了，可能我们还在反应上一个话题的内容。而「快」就要求对应于有一个比较大块的「意义反应单元」。什么意思呢？先以中文举例：当我们听到「我今天要去游泳」，我们理解的是整个句子，而不是逐词地理解「我、今天、要、去、游泳」。而放在英文中，非母语学生如果不经特别的训练，理解听力中说话人的语义往往是逐词进行的——就像后面那个例子一样。可以想见，这样去理解意思，是怎么都快不起来的。</p><p>可见，如果只是做听写练习，或者以美剧或者 VOA 之类的材料做泛听，是不够的。前者只解决了「辨音」的问题，而且效率低下；后者只是在不断地重复强化熟悉的句式和表达方式在脑海中的印象，不熟悉的内容还是不行。</p><p>这五步的精听练习中，第一步是模拟实际的环境（因为实际情况我们就只能听对方说一遍），第二步是辅助，第三步是建立英语到汉语的对应，第四步解决辨音的问题，第五步是在强化「声音 - 语义」的直接连接。这就是五步精听法背后的原理。</p><h2 id="推荐材料"><a href="#推荐材料" class="headerlink" title="推荐材料"></a>推荐材料</h2><ul><li>老托 93 篇听力练习</li><li>推荐的材料是科学美国人节目的「一分钟科学（Sixty Second Science）」</li></ul>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语语法（五）：非谓语动词</title>
      <link href="posts/8811a582/"/>
      <url>posts/8811a582/</url>
      
        <content type="html"><![CDATA[<p>在很早的<a href="/2016/07/31/tense-selection/">上一篇</a>文章中，我们讲了英语当中的时态选择。时态选择涉及到的主要是谓语动词的形态变化。此篇继续讲动词，不过话题转向非谓语动词。</p><h2 id="独立子句与主谓结构"><a href="#独立子句与主谓结构" class="headerlink" title="独立子句与主谓结构"></a>独立子句与主谓结构</h2><p>任何一个独立子句（independent clause）都有且只有一套主谓结构。</p><p>什么叫独立子句呢？我们知道，英文当中的句子是有主句和（可选的若干个）从句之分。在不考虑并列的情况下，主句和（各个）从句就都分别是独立子句。如果存在并列，那么并列的若干分句又分别是独立子句。其中，既没有从句又没有并列的主句，称为简单句。在英语中，简单句有五种基本句型。这一点，我们在<a href="/2014/06/21/basic-sentence-and-the-complement/">系列第一篇</a>中已经处理过了。</p><p>什么叫主谓结构呢？引用<a href="/2014/06/21/basic-sentence-and-the-complement/">系列第一篇</a>中的表述如下：</p><blockquote><p>从意思上说，一个完整句子表达的无非是「一个人/一个东西怎么样了」。这里「一个人/一个东西」称为主语部分（subject），告诉人们「这个句子讨论的是『一个人或者一个东西』」；「怎么样了」称为谓语部分（predicate，也称「述语部分」），它可以是「做了什么事情」或者「具有某种特性」。主语部分形式比较单一，通常由名词性的结构来担任。谓语部分的形式变化较多，五种基本句型实际就是通过不同的谓语部分结构来表达五种类型的含义。<br>不过，不管谓语部分如何变化，它都由动词起头，并承担主要的表意功能。因此讨论基本句型就有必要讨论谓语动词。</p></blockquote><p>因此，独立子句都有且只有一套主谓结构这个命题可以理解成，在一个独立子句中，你可以说「一个人/一个东西怎么样了」，但不能说成「一个人/一个东西怎么样了怎么样了[怎么样了……]」。不然，句子就成病句了。</p><h2 id="谓语动词与非谓语动词"><a href="#谓语动词与非谓语动词" class="headerlink" title="谓语动词与非谓语动词"></a>谓语动词与非谓语动词</h2><p>由于谓语部分总是以动词起头，我们就把这个动词称之为谓语动词（predicate verb）。谓语动词又叫限定动词（finite verb）；这是因为：谓语动词会受到主语的人称、数量、时态和情态的限制。（这会引出主谓一致的话题，后表。）</p><blockquote><p>这里还有一点需要澄清的地方。<br>在中文教学中，常用「主谓宾」这样的表述来描述句子结构，似乎谓语和宾语是相互分开独立的部分。但实际上，宾语是谓语的一部分。「主谓宾」里的「谓」实际上指的是「谓语动词」的意思。这一点，在<a href="/2014/06/21/basic-sentence-and-the-complement/">基本句型</a>的讲解中也有体现：我们写 S(ubject) + V(erb) + O(bject) 而非是 S(ubject) + P(redicate) + O(bject)。</p></blockquote><p>一个独立子句都有且只有一套主谓结构的直接推论就是：一个独立子句都有且只有一个谓语动词或者并列的多个谓语动词。</p><blockquote><p>后者的例子比如：「I <strong>put</strong> the book on the desk and <strong>leave</strong> the room.」其中 put 和 leave 是并列的两个谓语动词，但整个句子只有一套主谓结构。不过，若写成「I <strong>put</strong> the book on the desk, and I <strong>leave</strong> the room.」就是两个并列子句了。这是因为，and 并列的是 I put 和 I leave 两套主谓结构。</p></blockquote><p>在这个规则限定之下，若是要在句子中独立于谓语动词之外表达动作的含义，就必须使用非谓语动词。由于它不受主语的限制，所以也称为非限定动词（nonfinite verb）。在英语中，非谓语动词主要有以下三类：不定式（infinitives），分词（participles，包括现在分词（present participles）和过去分词（past participles））和 动名词（gerunds）。后二者又统称为动状词（verbals）。</p><blockquote><p>除了这三种非谓语动词之外，在其他语言中还有动形词（gerundive，拉丁语）、动名词（supine，拉丁语，和 gerunds 的区别主要在「格」上）、动副词（converb，突厥语、蒙古语等）。</p></blockquote><h2 id="为什么需要非谓语动词"><a href="#为什么需要非谓语动词" class="headerlink" title="为什么需要非谓语动词"></a>为什么需要非谓语动词</h2><p>为什么需要非谓语动词，这一问题等价于，为什么人们会要在句子中独立于谓语动词之外表达动作的含义。</p><p>这个问题看起来有点傻，但我认为其实还是蛮重要的。因为这影响着我们能否用统一的方式来处理英语中的四种非谓语动词而不需要记忆额外的规则。对这个问题，我有以下朴素的思考：</p><ul><li>因为，每个动词作为谓语动词，都能「撑」起一个独立子句。</li><li>所以，非谓语动词及其宾语（表语）或其他附属结构摘出来能够和适当的主语组成一个独立子句，它通常可以作为原句的从句存在。</li><li>再然后，反过来，从句子简化的角度看待问题，如果将从句的关联词/引导词省略，再将可能重复的主语省略，再将可能存在的情态动词、助动词去掉或者变形，最后从句动词有实际意义不能直接省略，就只好变成非谓语动词了。</li></ul><p>在经过仔细观察之后，我发现从句子简化的角度，可以比较一贯地处理英语中的四种非谓语动词组成的短语；当然，对于动名词和分词单独使用分别充当名词和形容词的时候，直接将它们视作是对应词性的单词即可，不需要额外的处理。</p><h2 id="不定式（infinitives）"><a href="#不定式（infinitives）" class="headerlink" title="不定式（infinitives）"></a>不定式（infinitives）</h2><h3 id="基本形式"><a href="#基本形式" class="headerlink" title="基本形式"></a>基本形式</h3><p>英语当中的不定式（infinitives）的基本形式是 <em>to + V_，即以不变词（particle）_to</em> 引导的动词原形。举例来说，下列句子中，斜体标示的是不定式。</p><ul><li>I’m glad <em>to know</em> you. | 很高兴认识你。</li><li>I want <em>to play</em> computer game. | 我想玩电脑游戏。</li><li>I asked Sophia <em>to help</em> me in English. | 我请 Sophia 帮我提升英语。</li></ul><p>不定式的不变词 <em>to</em> 在某些情况下可以省略，形成无修饰不定式（bald infinitives）；也就是说，光秃秃的动词原形，可能也是不定式。在使役动词和感官动词之后，往往不定式的不变词 <em>to</em> 需要省略。（原因后表）同样，下列句子中，斜体标示的是不定式。</p><ul><li>He made us <em>wash</em> his car. | 他令我们为他洗车。</li><li>I heard her <em>cry</em> out in pain. | 我听见她疼得大哭出声。</li></ul><p>在句子当中，视不同情况，不定式可以当做名词、形容词、副词的角色来使用。</p><h3 id="不定式的句子简化"><a href="#不定式的句子简化" class="headerlink" title="不定式的句子简化"></a>不定式的句子简化</h3><p>我们来看几个用到动词不定式的场景中，不定式都起到了什么成分的作用，以及它可以怎样的从句简化而来。在这部分，我们暂不处理无修饰不定式的情形。</p><p><strong>I’m glad <em>to know</em> you.</strong></p><p>句子的主干是「I’m glad.」，即「我很高兴」，「to know you」是高兴的原因状语，也就是不定式作为副词结构。因此原句如果以很重的翻译腔来翻译的话，应该是：「我很高兴因为我能认识你」。于是很容易得到它的原句：</p><blockquote><p>I’m glad because I can know you.</p></blockquote><p>简化流程：</p><ul><li>主句主语和从句主语均为「I」，因此可以省略；原句变为：I’m glad <del>because I</del> can know you.</li><li>主句谓语动词 <em>am</em> 和从句谓语动词 <em>can</em> 不能同时出现，且从句表意动词是 <em>know</em> 而非 _can_，因此<strong>将 <em>can</em> 改为 <em>to</em> 以保留「不确定的语气」</strong>；原句变为：I’m glad <del>because I can</del> to know you.</li><li>简化完成。</li></ul><p><strong>I want <em>to play</em> computer game.</strong></p><p>句子的主干是「I want _sth._」，即「我想要 sth」。显然，「to play computer game」是想要的动词宾语，也就是不定式作为名词结构。于是很容易得到它的原句：</p><blockquote><p>I want that I will play computer game.</p></blockquote><p>简化流程：</p><ul><li>主句主语和从句主语均为「I」，因此可以省略；原句变为：I want <del>that I</del> will play computer game.</li><li>主句谓语动词 <em>want</em> 和从句谓语动词 <em>will</em> 不能同时出现，且从句表意动词是 <em>play</em> 而非 _will_，因此<strong>将 <em>will</em> 改为 <em>to</em> 以保留「不确定的语气」</strong>；原句变为：I want <del>that I will ~</del> to play computer game.</li><li>简化完成。</li></ul><p><strong>I asked Sophia <em>to help</em> me in English.</strong></p><p>句子的主干是「I asked Sophia.」，即「我请求 Sophia」。「to help me in English」是 Sophia 的宾语补足语，也就是不定式做名词/形容词结构。于是很容易得到它的原句：</p><blockquote><p>I asked Sophia whether she will help me in English.</p></blockquote><p>简化流程：</p><ul><li>主句宾语和从句主语均为「Sophia」，因此可以省略；原句变为：I asked Sophia <del>whether she</del> will help me in English.</li><li>主句谓语动词 <em>asked</em> 和从句谓语动词 <em>will</em> 不能同时出现，且从句表意动词是 <em>help</em> 而非 _will_，因此<strong>将 <em>will</em> 改为 <em>to</em> 以保留「不确定的语气」</strong>；原句变为：I asked Sophia <del>whether she will</del> to help me in English.</li><li>简化完成。</li></ul><h3 id="不定式的特点"><a href="#不定式的特点" class="headerlink" title="不定式的特点"></a>不定式的特点</h3><p>从以上三例可以看到，不定式和助动词关系密切，从句子简化的角度来看，不定式可以视作是助动词的变形。在这个过程中，不定式的不变词 <em>to</em> 一方面承担了语法功能，一方面<strong>表达不确定的语气</strong>。下表更详细地描述了助动词和不定式（的不变词）之间的相似性。</p><table><thead><tr><th align="left"></th><th align="left">助动词</th><th align="left">不定式（的不变词）</th></tr></thead><tbody><tr><td align="left">都要接动词原形</td><td align="left">I will go.</td><td align="left">I want to go.</td></tr><tr><td align="left">都表达不确定语气</td><td align="left">He is right. -&gt; He may be right.</td><td align="left">He is right. -&gt; He seems to be right.</td></tr><tr><td align="left">都需要借完成式表达过去时间</td><td align="left">It might have rained last night.</td><td align="left">It seems to have rained last night.</td></tr></tbody></table><blockquote><p>助动词缺少表达过去时间的能力。一般理解上，could 是 can 的过去式，而 might 是 may 的过去式。但实际上，它们在实际表意中，只能表示比 can/may 更弱的猜测力度，而不能表示对过去的猜测。比如「It may rain (in minutes).」和「It might rain (in minutes).」都表示「可能要下雨了」，都表示对现在/将来的猜测。若是要表达对过去的猜测，必须借助完成式，写成 It may/might have rain last night.</p></blockquote><p>此外，很容易发现常见助动词和不定式表达之间的对应关系。</p><table><thead><tr><th align="left">助动词</th><th align="left">不定式</th></tr></thead><tbody><tr><td align="left">must</td><td align="left">have to</td></tr><tr><td align="left">shall/should</td><td align="left">ought to / be responsible to</td></tr><tr><td align="left">will/would</td><td align="left">be going to</td></tr><tr><td align="left">can/could</td><td align="left">be able to</td></tr><tr><td align="left">may/might</td><td align="left">be likely to</td></tr></tbody></table><h3 id="无修饰不定式"><a href="#无修饰不定式" class="headerlink" title="无修饰不定式"></a>无修饰不定式</h3><p>在处理通常形式的不定式时，我们注意到不定式的不变词 <em>to</em> 可以视作是助动词的变化。在表意上，它表达了不确定性。据此，我们可分析看看何种情况下不定式应省略不变词，成为无修饰不定式。——当必须使用不定式，但又不能表达不确定性时，就应该省略不变词，变成无修饰不定式。</p><p>我们对比以下两例：</p><ul><li>He made us <em>wash</em> his car.</li><li>He asked us <em>to wash</em> his car.</li></ul><p>在这里，<em>made</em> 是使役动词而 <em>asked</em> 是普通动词。使役动词和普通动词的区别就在于，使役动词后的动作是具有强制性的，换言之也就是没有不确定性。这就是传统语法书里写的「使役动词后需要使用动词原形」的原因。</p><p>继续观察以下两例：</p><ul><li>I heard her <em>cry</em> out in pain.</li><li>I see the boy <em>play</em> on the playground.</li></ul><p>在这里，<em>heard</em> 和 <em>see</em> 都是感官动词。感官动词与普通动词的区别就在于，感官动词是「感受到的真相」。真相当然就没有不确定性，因此其后不能用 <em>to</em> 引导的不定式来表达不确定性。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>不定式的基本形态是 _to + V_；其中 <em>to</em> 是不变词，可视作助动词的变形，承担语法功能，同时表达「不确定性」。当不定式所处的上下文没有不确定性时，就要省略不变词，变成单纯的动词原形 _V_，此时称作无修饰不定式。</p><p>不定式在句子中可以承担名词、形容词、副词的功能。</p><h2 id="动名词（gerunds）"><a href="#动名词（gerunds）" class="headerlink" title="动名词（gerunds）"></a>动名词（gerunds）</h2><p>上一节介绍了不定式，不定式可以用来充作名词。这一节讲同样可以充作名词的动名词。</p><h3 id="基本形式-1"><a href="#基本形式-1" class="headerlink" title="基本形式"></a>基本形式</h3><p>在英语中，动名词的基本形式是 _V-ing_，即，在动词原形之后，加上 <code>ing</code> 作为后缀。举例来说，下列句子中，斜体标示的是动名词。</p><ul><li><em>Swiming</em> is my favorite sport. | 游泳是我最喜欢的运动。</li><li>I really enjoyed <em>playing</em> computer game with my brother that night. | 我着实享受那晚与哥哥一起玩电脑游戏。</li></ul><h3 id="动名词与名词——单独使用"><a href="#动名词与名词——单独使用" class="headerlink" title="动名词与名词——单独使用"></a>动名词与名词——单独使用</h3><p>在第一个例句中，<em>Swiming</em> 是<u>动名词单独使用</u>的例子。单独使用的动名词与普通名词没有太大的区别，都可以充当主语、动词宾语或者介词等需要名词填充的语法成分。</p><ul><li><em>Swiming</em> is my favorite sport. | 主语</li><li>My favorite sport is <em>swiming</em>. | 动词宾语做主语补语</li><li>I enjoy <em>swiming</em> daily. | 动词宾语做句子宾语</li><li>I’m not afraid of death, but I’m afraid of <em>dying</em>. | 介词宾语</li></ul><p>不过，动名词涉及到的动作通常带有<strong>延续性</strong>的意味。比如</p><ul><li><em>swiming</em> 总要多划几下才叫游泳，不然只能叫扑腾；</li><li><em>climbing</em> 总要持续地爬才叫攀登，不然只能叫小童学步；</li><li><em>dancing</em> 总要连续一串动作才叫跳舞，不然只能叫抽风；</li><li><em>drinking</em> 总要喝几口才能叫喝酒，不然只能叫酒精中毒。</li></ul><p>此外，因为动名词含有动作的意味，所以它通常是看不见摸不着的抽象名词。因此，动名词通常都是不可数名词。但也有少许例外，比如</p><ul><li>There will be two <em>weddings</em> at the auditorium tomorrow night.</li></ul><h3 id="名词从句简化——动名词短语"><a href="#名词从句简化——动名词短语" class="headerlink" title="名词从句简化——动名词短语"></a>名词从句简化——动名词短语</h3><p>处理完了动名词单独使用的情形，接下来处理所谓的<u>动名词短语</u>。</p><p><strong>I really enjoyed <em>playing</em> computer game with my brother that night.</strong></p><p>句子主干是「I enjoyed <code>object</code>」，即「我享受 <code>object</code>」。「playing computer game with my brother that night」是 enjoyed 的宾语。于是很容易得到它的原句：</p><blockquote><p>I really enjoyed that I played computer game with my brother that night.</p></blockquote><p>简化流程：</p><ul><li>主句宾语和从句主语均为「I」，因此可以省略；原句变为：I really enjoyed <del>that I</del> played computer game with my brother that night.</li><li>主句谓语动词 <em>enjoyed</em> 和从句谓语动词 <em>played</em> 不能同时出现，因此需将从句谓语动词修改为非谓语动词。由于充当名词成分，候选项有 <em>to play</em> 和 _playing_。考虑到此处无不确定语气，因此选择动名词；原句变为：I really enjoyed <del>that I played</del> playing computer game with my brother that night.</li><li>简化完成。</li></ul><p><strong><em>Killing</em> enemies on battlefield is glory of soldiers.</strong></p><p>句子主干是「<code>subject</code> is glory」，即「<code>subject</code> 是荣耀」。「Killing enemies on battlefield」是句子主语。于是很容易得到它的原句：</p><blockquote><p>That soldiers kill enemies on battlefield is glory of soldiers.</p></blockquote><p>简化流程：</p><ul><li>主句补语的所有格与从句主语都是「soldiers」，因此可以省略；原句变为：<del>That soldiers</del> kills enemies on battlefield is glory of soldiers.</li><li>主句谓语动词 <em>is</em> 和从句谓语动词 <em>kills</em> 不能同时出现，因此需将从句谓语动词修改为非谓语动词。由于充当名词成分，候选项有 <em>to kill</em> 和 _killing_。考虑到此处无不确定语气，因此选择动名词；原句变为：Killing enemies on battlefield is glory of soldiers.</li><li>简化完成。</li></ul><p><strong><em>Being</em> invited here is my honor.</strong></p><p>句子主干是「<code>subject</code> is honor.」，即「<code>subject</code> 是荣耀」。「Being invited here」是句子主语。于是很容易得到它的原句：</p><blockquote><p>That I was invited here is my honor.</p></blockquote><p>简化流程：</p><ul><li>主句补语所有格与从句主语都是「I」，因此可以省略；原句变为：<del>That I</del> was invited here is my honor.</li><li>主句谓语动词 <em>is</em> 和从句谓语动词 <em>was</em> 不能同时出现，因此需将从句谓语动词修改为非谓语动词。由于充当名词成分，候选项有 <em>to be</em> 和 _being_。考虑到此处无不确定语气，因此选择动名词；原句变为：Being invited here is my honor.</li><li>简化完成。</li></ul><p>注意，这里 <em>being invited</em> 是动名词的被动形式。其中 <em>being</em> 当中的 <em>be</em> 是不表意的，真正起到作用的是后缀 <em>-ing</em> 形成动名词。对于动名词的被动形式，和我们在<a href="/2015/05/03/tense-of-verb/">动词时态</a>中处理被动语态中一样，将 be-动词当成正常的动词，而后取其动名词形式。</p><p><strong>I don’t like John’s <em>calling</em> my girlfriend day after day.</strong></p><p>句子主干是「I don’t like <code>object</code>」，即「我不喜欢 <code>object</code>」。「John’s calling my girlfriend day after day」是句子宾语。注意到，动名词 <em>calling</em> 和普通名词一样，可以被所有格限定。而所有格的人称，即是动名词对应动作的逻辑主语。于是很容易得到它的原句：</p><blockquote><p>I don’t like that John is calling my girlfriend day after day.</p></blockquote><p>简化流程：</p><ul><li>主句主语和从句主语不同，因此从句主语不能直接省略，而应当变为所有格；原句变为：I don’t like <del>that John</del> John’s is calling my girlfriend day after day.</li><li>主句谓语动词 <em>do</em> 和从句谓语动词 <em>is</em> 冲突，且从句谓语中实际承担表意的是 _calling_，因此可以直接删除从句谓语动词 _is_；原句变为：I don’t like <del>that John</del> John’s <del>is</del> calling my girlfriend day after day.</li><li>简化完成。</li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>动名词的基本形式是 _V-ing_。动名词可以单独使用，也可以组成动名词短语。不论是单独使用还是组成动名词短语，动名词都在句子当中充当名词成分。</p><p>单独使用的动名词和普通名词差异不大，但有以下一些特点：</p><ul><li>表达的动作带有延续性（后缀 <code>-ing</code> 的功能）；</li><li>通常是不可数名词。</li></ul><p>组成动名词短语时，动名词短语可看做是名词从句的简化。具体是何种名词性从句，取决于动名词短语在原句中的地位。在简化名词性从句时，若从句谓语动词不带有不确定性且主句不表达不确定性，则需使用动名词，组成动名词短语。在遇到从句主语与主句主语或所有格不重合时，在组成动名词短语时需将从句主语变成所有格。</p><p>在英语中，非谓语动词里的动名词和不定式都可以在句子当中充当名词成分。不同的是，<strong>不定式带有不确定性</strong>，而<strong>动名词带有延续性</strong>。</p><h2 id="分词（participles）"><a href="#分词（participles）" class="headerlink" title="分词（participles）"></a>分词（participles）</h2><h3 id="基本形式-2"><a href="#基本形式-2" class="headerlink" title="基本形式"></a>基本形式</h3><p>英语里的分词包括现在分词（present participles）和过去分词（past participles）。</p><ul><li>现在分词的基本形式是 _V-ing_，与动名词完全相同。</li><li>过去分词的基本形式是 _V-ed_。</li></ul><p>分词可以<strong>单独使用，类似形容词</strong>。举例来说，下列斜体标示的是现在分词：</p><ul><li>The <em>flying</em> bird is cute. | 那只正在飞的小鸟很可爱。（现在分词作形容词，修饰主语）</li><li>I love the <em>flying</em> bird. | 我喜欢那只正在飞的小鸟。（现在分词作形容词，修饰宾语）</li><li>The bird is <em>flying</em>. | 那只小鸟正在飞。（现在分词做形容词，作为主语补足语修饰主语）</li></ul><p>下列斜体标示的，则是过去分词：</p><ul><li>The <em>boiled</em> water is safe to drink. | 开水喝起来安全。（过去分词作形容词，修饰主语）</li><li>Please give me a bottle of <em>boiled</em> water. | 请给我来一杯开水。（过去分词做形容词，修饰宾语）</li><li>The water is <em>boiled</em>. | 水开了。（过去分词做形容词，作为主语补足语修饰主语）</li></ul><p>分词可以组成<strong>分词短语，充当形容词成分</strong>。举例来说，下列斜体标示的是现在分词短语和过去分词短语：</p><ul><li>Children <em>studying in school</em> make lots of friends. | 在学校读书的孩子们交了很多朋友。（现在分词短语做后置定语，修饰主语）</li><li>Soldiers <em>wounded in war</em> are sent home. | 在战场上受伤的士兵们被送回家了。（过去分词短语做后置定语，修饰主语）</li><li>Soldiers <em>being sent home</em> are wounded. | 正被送回家的士兵们受伤了。（现在分词短语，被动式，做后置定语，修饰主语）</li></ul><p>分词可以有特别的<strong>分词构句，充当副词成分</strong>。因为分词通常意义上被理解成形容词，不能充当副词成分。因此，对这种特别的语法现象，人们称之为分词构句。举例来说，下列斜体标示的是分词构句：</p><ul><li><em>Wounded in war</em>, the soldiers are sent home. | 因为在战场上受了伤，士兵们被送回了家。（过去分词构句，做原因状语）</li><li><em>Running for four hours</em>, John is exhausted. | 跑步 4 小时后，约翰筋疲力尽。（现在分词构句，做时间状语）</li><li><em>Having been treated unfairly</em>, Lisa quits her work. | 因为被不公平地对待，丽莎辞职了。（现在分词构句，完成式，做原因状语）</li></ul><p>下面分别就几种分词的使用方法讨论。</p><h3 id="分词与形容词——单独使用"><a href="#分词与形容词——单独使用" class="headerlink" title="分词与形容词——单独使用"></a>分词与形容词——单独使用</h3><p>在传统语法里，分词是形容词。分词可以做定语修饰主语或者宾语，也可以作为主语补足语（表语）修饰主语。在这个意义上，分词与形容词完全一样。</p><ul><li>The <em>black</em> dog is pitiful. | 黑狗很可怜。（形容词作定语修饰主语）</li><li>The <em>barking</em> dog is pitiful. | 汪汪叫的狗很可怜。（现在分词做定语修饰主语）</li><li>The <em>wounded</em> dog is pitiful. | 受伤的狗很可怜。（过去分词做定语修饰主语）</li><li>I see a <em>black</em> dog. | 我看见一只黑狗。（形容词做定语修饰宾语）</li><li>I see a <em>barking</em> dog. | 我看见一只汪汪叫的狗。（现在分词做定语修饰宾语）</li><li>I see a <em>wounded</em> dog. | 我看见一只受伤的狗。（过去分词做定语修饰宾语）</li><li>The dog is <em>black</em>. | 这狗是黑的。（形容词做主语补足语，修饰主语）</li><li>The dog is <em>barking</em>. | 这狗正在叫。（现在分词做主语补足语，修饰主语）</li><li>The dog is <em>wounded</em>. | 这狗受伤了。（过去分词做主语补足语，修饰主语）</li></ul><p>很显然，我们得到分词的第一个特点：<strong>现在分词和过去分词都能如普通形容词一样，用于定语和主语补足语</strong>。</p><p>此外，仿照之前处理不定式和分词的时候，我们可以将 <code>-ing</code> 和 <code>-ed</code> 视作是形容词后缀，和 <code>-ful</code>, <code>-able</code>, <code>-less</code> 之类的一样，表达一种特定的含义。<code>-ing</code> 暗示「持续」或者「正在发生」的含义；<code>-ed</code> 暗示「被动」或者「完成」的含义。</p><p>有了这一认识，<a href="/2015/05/03/tense-of-verb/">动词时态</a>及<a href="/2016/07/31/tense-selection/">时态选择</a>中处理进行式和被动语态的表述就很好理解了。而且，这一认识可能比 <code>be + V-ing</code> 表示进行以及 <code>be + V-ed</code> 表示被动的公式更好。比如说：</p><ul><li>「The dog is <em>barking</em>.」意思是「这狗正在叫」，看似是 <code>be + V-ing</code> 的功劳。但实际上「The barking dog」里没有 be-动词，也表示「正在汪汪叫的狗」。可见，表达「持续」或者「正在发生」的含义的是 <code>-ing</code> 后缀，而非 <code>be + V-ing</code> 这一结构。</li><li>被动语态也有类似处理，而且，<code>be + V-ed</code> 有时候也不表示被动。比如「The leaves are all fallen.」译作「叶子掉光了」。这里的翻译，取过去分词的「完成」意味，而不能套用 <code>be + V-ed</code> 表示被动语态。</li><li>又比如进行式和被动式的混合「The case is being investigated by police.」，如果以「背公式」的方法来学习，那就又要背下「Be + being + V-ed」表示进行式的被动语态。但如果按我们这里的认识就很简单了。<em>is</em> 无需翻译，<em>being</em> 中 <em>be</em> 无意义而 <code>-ing</code> 表示「正在」，<code>-ed</code> 表示被动翻译为被调查。于是译文就脱口而出：「案件正在被警察调查」。</li></ul><h3 id="形容词性从句简化——分词短语"><a href="#形容词性从句简化——分词短语" class="headerlink" title="形容词性从句简化——分词短语"></a>形容词性从句简化——分词短语</h3><p>处理完了分词单独使用的问题，接下来我们看看分词短语。形容词性从句简化后，往往留下分词短语。</p><p><strong>Children <em>studying in school</em> make lots of friends.</strong></p><p>句子的主干是「Children make lots of friends.」，即「孩子们交了很多朋友」。「studying in school」是修饰主语的定语。因此很容易得到原句：</p><blockquote><p>Children who are studing in school make lots of friends.</p></blockquote><p>简化流程：</p><ul><li>主句主语和从句主语（先行词 _who_）相同，因此可以省略；原句变为：Children <del>who</del> are studing in school make lots of friends.</li><li>主句谓语动词 <em>make</em> 与从句谓语动词 <em>are</em> 冲突，而从句谓语中实际承担表意的是 _studing_。因此，可以直接去掉从句谓语动词 _are_；原句变为：Children <del>who are</del> studing in school make lots of friends.</li><li>简化完成。</li></ul><p><strong>Soldiers <em>wounded in war</em> are sent home.</strong></p><p>句子的主干是「Soldiers are sent home.」，即「士兵们被送回了家」。「wounded in war」是修饰主语的定语。因此很容易得到原句：</p><blockquote><p>Soldiers who were wounded in war are sent home.</p></blockquote><p>简化流程：</p><ul><li>主句主语和从句主语（先行词 _who_）相同，因此可以省略；原句变为：Soldiers <del>who</del> were wounded in war are sent home.</li><li>主句谓语动词 <em>are</em> 与从句谓语动词 <em>were</em> 冲突，而从句谓语中实际承担表意的是 _wounded_。因此，可以直接去掉从句谓语动词 _were_；原句变为：Soldiers <del>who were</del> wounded in war are sent home.</li><li>简化完成。</li></ul><p><strong>Soldiers <em>being sent home</em> are wounded.</strong></p><p>句子的主干是「Soldiers are wounded.」，即「士兵们受伤了」。「being sent home」是修饰主语的定语。因此很容易得到原句：</p><blockquote><p>Soldiers who are being sent home are wounded.</p></blockquote><p>简化流程：</p><ul><li>主句主语和从句主语（先行词 _who_）相同，因此可以省略；原句变为：Soldiers <del>who</del> are being sent home are wounded.</li><li>主句谓语动词 <em>make</em> 与从句谓语动词 <em>are</em> 冲突，而从句谓语中实际承担表意的是 _sent_。因此，可以直接去掉从句谓语动词 _are_；原句变为：Soldiers <del>who are</del> being sent home are wounded.</li><li>简化完成。</li></ul><h3 id="副性从句简化——分词构句和独立主格"><a href="#副性从句简化——分词构句和独立主格" class="headerlink" title="副性从句简化——分词构句和独立主格"></a>副性从句简化——分词构句和独立主格</h3><p>接下来我们来处理分词构句和独立主格。</p><p><strong><em>Wounded in war</em>, the soldiers are sent home.</strong></p><p>句子的主干是「The soldiers are sent home.」，即「士兵们被送回了家」。「Wounded in war」是句子的原因状语。因此很容易得到原句：</p><blockquote><p>Because they were wounded in war, the soldiers are sent home.</p></blockquote><p>简化流程：</p><ul><li>主句主语和从句主语相同，因此可以省略；原句变为：<del>Because they</del> were wounded in war, the soldiers are sent home.</li><li>主句谓语动词 <em>are</em> 与从句谓语动词 <em>were</em> 冲突，而从句谓语中实际承担表意的是 _wounded_。因此，可以直接去掉从句谓语动词 _were_；原句变为：<del>Because they were</del> wounded in war, the soldiers are sent home.</li><li>简化完成。</li></ul><p><strong><em>Running for four hours</em>, John is exhausted.</strong></p><p>句子的主干是「John is exhausted.」，即「约翰筋疲力尽」。「Running for four hours」是句子的时间状语。因此很容易得到原句：</p><blockquote><p>After he was running for four hours, John is exhausted.</p></blockquote><p>简化流程：</p><ul><li>主句主语和从句主语相同，因此可以省略；原句变为：<del>After he</del> was running for four hours, John is exhausted.</li><li>主句谓语动词 <em>is</em> 与从句谓语动词 <em>was</em> 冲突，而从句谓语中实际承担表意的是 _running_。因此，可以直接去掉从句谓语动词 _was_；原句变为：<del>After he was</del> running for four hours, John is exhausted.</li><li>简化完成。</li></ul><p><strong><em>Having been treated unfairly</em>, Lisa quits her work.</strong></p><p>句子的主干是「Lisa quits her work.」，即「丽莎辞职了」。「Having been treated unfairly」是句子的原因状语。因此很容易得到原句：</p><blockquote><p>Because she has been treated unfairly, Lisa quits her work.</p></blockquote><p>简化流程：</p><ul><li>主句主语和从句主语相同，因此可以省略；原句变为：<del>Because she</del> has been treated unfairly, Lisa quits her work.</li><li>主句谓语动词 <em>quits</em> 与从句谓语动词 <em>has</em> 冲突，因此要将 <em>has</em> 转化为非谓语动词。利用分词构句，可选项有 <em>having</em> 及 <em>had*。考虑到此处没有被动的意味，而完成的意味已由完成式承担。因此，将 *has</em> 变为现在分词 _having_；原句变为：<del>Because she has</del> Having been treated unfairly, Lisa quits her work.</li><li>简化完成。</li></ul><p>观察不难得到分词构句的一般规律：</p><ul><li>现有两个句子，主语相同。</li><li>其中一个句子可以充当另一个句子的状语。这个状语可以是条件状语、原因状语、让步状语、时间状语等各种状语。</li><li>将充当状语的句子的主语去掉，将状语里的谓语动词变化：<ul><li>如果状语是一般式主动语态，则用现在分词构句。</li><li>如果状语是一般式被动语态，则用过去分词构句。</li><li>如果状语是完成式，则用现在分词构句。</li></ul></li></ul><p>特别地，如果两个句子的主语不同，则需要保留充当状语的句子中的主语。此时形成的结构叫独立主格结构。仅举一例：</p><ul><li>The condition is favorable. He might succeed. | 两个句子，主语不同。</li><li>前句可以充当后句的条件状语。</li><li>保留状语从句的主语，而后用现在分词构句，得到：The condition being favorable, he might succeed.</li></ul><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>分词分为现在分词和过去分词，他们的基本形态是 <em>V-ing</em> 和 <em>V-ed</em> ，</p><p>分词可以单独使用，与形容词相似，可以充当定语、补语。在分词单独使用时，可将 <code>-ing</code> 视作表达「正在」或「进行」的形容词后缀，可将 <code>-ed</code> 视作表达「被动」或「完成」的形容词后缀。</p><p>分词可组成分词短语，可视作是形容词性从句的简化。</p><p>分词相关短语也可以从副词从句简化而来。但由于分词是形容词性，所以专门起了名字叫做「分词构句」和「独立主格结构」。前者用于主从主语一致的情况，后者用于主从主语不一致的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 从头开始</title>
      <link href="posts/9ec8e816/"/>
      <url>posts/9ec8e816/</url>
      
        <content type="html"><![CDATA[<p>hexo 出自台湾大学生<a href="http://twitter.com/tommy351">tommy351</a>之手，是一个基于 Node.js 的静态博客程序，其编译上百篇文字只需要几秒。hexo 生成的静态网页可以直接放到 GitHub Pages，BAE，SAE 等平台上。</p><p>只需要几个简单命令，你就可以完成一切。</p><pre class=" language-bash"><code class="language-bash">hexo g <span class="token comment" spellcheck="true">#生成 </span>hexo s <span class="token comment" spellcheck="true">#本地服务</span>hexo d <span class="token comment" spellcheck="true">#部署</span></code></pre><p>下面逐步介绍，进入正题。</p><hr><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>这里将基于Mac平台进行说明。Windows平台用户可以作为参考，但具体操作会有些许不同。</p><p><strong>安装 Node</strong> </p><p>建议使用<a href="https://brew.sh/">Homebrew</a>进行安装。</p><p>打开终端输入：<code>brew install node</code> 即可。此命令默认安装最新版本的<a href="http://nodejs.org/">Node.js</a>,若想指定版本可用 @ + 版本号 指定。例如：<code>brew install node@14</code>。</p><p>用此方法安装的Node.js后期可以很方便的用<code>brew update</code>和<code>brew upgrade</code>进行升级。</p><p>到<a href="http://nodejs.org/">Node.js</a>官网下载相应平台的<a href="http://nodejs.org/download">最新版本</a>，一路安装即可。我用的是<a href="http://nodejs.org/dist/v0.10.22/node-v0.10.22-x86.msi">node-v0.10.22-x86.msi</a></p><p><strong>安装 Git</strong><br>Git 的客户端很多，我用的是<a href="http://code.google.com/p/msysgit">msysgit</a>，喜欢用绿色版本<a href="http://code.google.com/p/msysgit/downloads/detail?name=PortableGit-1.8.4-preview20130916.7z">Portable application for official Git for Windows 1.8.4</a>，下载下来设置一下环境变量即可，Git_HOME，%Git_HOME%\bin 之类的，不多说。</p><p><strong>安装 Sublime（可选）</strong><br><a href="http://www.sublimetext.com/">Sublime Text 2</a>在这里仅仅作为一个文本编辑器使用，支持各种编程语言和文件格式，当然也支持 Markdown 语法，实在是个不可多得的练码奇才。喜欢追鲜的也可以尝试处于 beta 版本的<a href="http://www.sublimetext.com/3">Sublime Text 3</a>。我用绿色版本<a href="http://c758482.r82.cf2.rackcdn.com/Sublime%20Text%202.0.2.zip">Portable Sublime Text 2.0.2.zip</a>。</p><blockquote><p>本屌是穷码畜，对于高大上的 Mac 码帅用户请移步：<a href="http://zespia.tw/hexo/docs/installation.html">hexo installation</a></p></blockquote><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><blockquote><p>GitHub 账号和 GitHub Pages 一般都应该有吧，已有的请自动无视这一部分。</p></blockquote><ul><li>首先注册一个『GitHub』帐号，已有的默认默认请忽略</li><li>建立与你用户名对应的仓库，仓库名必须为『your_user_name.github.com』</li><li>添加 SSH 公钥到『Account settings -&gt; SSH Keys -&gt; Add SSH Key』</li></ul><p><a href="http://bruce.u.qiniudn.com/2013/11/22/hexo-your-blog/my-github-pages.jpg1" title="my GitHub Pages"><img src="http://bruce.u.qiniudn.com/2013/11/22/hexo-your-blog/my-github-pages.jpg1" alt="my GitHub Pages"></a>my GitHub Pages</p><p>前两步忽略，只说第三步，<strong>添加 SSH-Key</strong>。</p><p>首先设置你的用户名密码：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.email <span class="token string">"bu.ru@qq.com"</span>  <span class="token function">git</span> config --global user.name <span class="token string">"bruce-sha"</span></code></pre><p>生成密钥：</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"bu.ru@qq.com"</span></code></pre><p>输入文件路径：</p><pre class=" language-bash"><code class="language-bash">H:\\hexo\\blog<span class="token operator">></span>ssh-keygen -t rsa -C <span class="token string">"bu.ru@qq.com"</span>  Generating public/private rsa key pair.  Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>//.ssh/id_rsa<span class="token punctuation">)</span>: H:\\git\\myssh\\ssh  Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:  Enter same passphrase again:  Your identification has been saved <span class="token keyword">in</span> H:\\git\\myssh\\ssh.  Your public key has been saved <span class="token keyword">in</span> H:\\git\\myssh\\ssh.pub.  The key fingerprint is:  b0:0c:2e:67:33:ab:c1:50:10:40:0a:ba:c1:80:59:22 bu.ru@qq.com</code></pre><blockquote><p>有个 bug，文件路径中的盘符 H 必须大写，否则会报错。</p></blockquote><p>上述命令若执行成功，会在<em>H:\git\myssh</em>目录下生成两个文件<em>id_rsa</em>和<em>id_rsa.pub</em>，最后两步：</p><ol><li> 用文本编辑器打开<em>ssh.pub</em>文件，拷贝其中的内容，将其添加到<a href="http://github.com/settings/ssh">Add SSH Key</a></li><li> 将<em>id_rsa</em>和<em>id_rsa.pub</em>拷贝至你 Git 安装目录下的*.ssh<em>目录，如</em>H:\PortableGit-1.8.4\.ssh*</li></ol><p><a href="http://bruce.u.qiniudn.com/2013/11/22/hexo-your-blog/add-ssh-keys.jpg" title="Add SSH Keys"><img src="http://bruce.u.qiniudn.com/2013/11/22/hexo-your-blog/add-ssh-keys.jpg" alt="Add SSH Keys"></a>Add SSH Keys</p><p>最后可以验证一下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p>若有问题，请重新设置。常见错误请参考：<br><a href="http://help.github.com/articles/generating-ssh-keys">GitHub Help - Generating SSH Keys</a><br><a href="http://help.github.com/articles/error-permission-denied-publickey">GitHub Help - Error Permission denied (publickey)</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><em>Node</em>和<em>Git</em>都安装好后，可执行如下命令安装 hexo：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo</code></pre><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>然后，执行 init 命令初始化 hexo 到你指定的目录：</p><pre class=" language-bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span></code></pre><blockquote><p>也可以 cd 到目标目录，执行<em>hexo init</em>。</p></blockquote><p>好啦，至此，全部安装工作已经完成！</p><h2 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><p>cd 到你的 init 目录，执行如下命令，生成静态页面至_hexo\public_目录。</p><pre class=" language-bash"><code class="language-bash">hexo generate</code></pre><blockquote><p>命令必须在 init 目录下执行，否则不成功，但是也不报错。<br>当你修改文章 Tag 或内容，不能正确重新生成内容，可以删除<em>hexo\db.json</em>后重试，还不行就到<em>public</em>目录删除对应的文件，重新生成。</p></blockquote><h2 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h2><p>执行如下命令，启动本地服务，进行文章预览调试。</p><pre class=" language-bash"><code class="language-bash">hexo server</code></pre><p>浏览器输入<a href="http://localhost:4000/">http://localhost:4000</a>就可以看到效果。</p><blockquote><p>请使用高级浏览器，否则可能…你懂的！</p></blockquote><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>执行 new 命令，生成指定名称的文章至<em>hexo\source\_posts\postName.md</em>。</p><pre class=" language-bash"><code class="language-bash">hexo new \<span class="token punctuation">[</span>layout\<span class="token punctuation">]</span> <span class="token string">"postName"</span> <span class="token comment" spellcheck="true">#新建文章</span></code></pre><p>其中 layout 是可选参数，默认值为 post。有哪些 layout 呢，请到<em>scaffolds</em>目录下查看，这些文件名称就是 layout 名称。当然你可以添加自己的 layout，方法就是添加一个文件即可，同时你也可以编辑现有的 layout，比如 post 的 layout 默认是<em>hexo\scaffolds\post.md</em></p><pre class=" language-bash"><code class="language-bash">title: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; &amp;#123; title &amp;#125; &amp;#125;  </span>date: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; &amp;#123; date &amp;#125; &amp;#125;  </span>tags:  \-\-\-</code></pre><blockquote><p>请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。</p></blockquote><p>我想添加 categories，以免每次手工输入，只需要修改这个文件添加一行，如下：</p><pre class=" language-bash"><code class="language-bash">title: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; &amp;#123; title &amp;#125; &amp;#125;  </span>date: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; &amp;#123; date &amp;#125; &amp;#125;  </span>categories:  tags:  \-\-\-</code></pre><p>postName 是 md 文件的名字，同时也出现在你文章的 URL 中，postName 如果包含空格，必须用”将其包围，postName 可以为中文。</p><blockquote><p>注意，所有文件：后面都必须有个空格，不然会报错。</p></blockquote><p>看一下刚才生成的文件<em>hexo\source\_posts\postName.md</em>，内容如下：</p><pre class=" language-bash"><code class="language-bash">title: postName <span class="token comment" spellcheck="true">#文章页面上的显示名称，可以任意修改，不会出现在 URL 中  </span>date: 2013-12-02 15:30:16 <span class="token comment" spellcheck="true">#文章生成时间，一般不改，当然也可以任意修改  </span>categories: <span class="token comment" spellcheck="true">#文章分类目录，可以为空，注意:后面有个空格  </span>tags: <span class="token comment" spellcheck="true">#文章标签，可空，多标签请用格式\[tag1,tag2,tag3\]，注意:后面有个空格  </span>\-\-\-  这里开始使用 markdown 格式输入你的正文。</code></pre><p>接下来，你就可以用喜爱的编辑器尽情书写你的文章。关于 markdown 语法，可以参考我的文章<a href="http://bruce-sha.github.io/2013/11/26/markdown/">Markdown 简明语法</a>。</p><p><strong>fancybox</strong><br>可能有人对这个<a href="http://bruce-sha.github.io/reading/">Reading</a>页面中图片的<a href="http://fancyapps.com/fancybox/">fancybox</a>效果感兴趣，这个是怎么做的呢。<br>很简单，只需要在你的文章*.md 文件的头上添加<em>photos</em>项即可，然后一行行添加你要展示的照片：</p><pre class=" language-bash"><code class="language-bash">layout: photo  title: 我的阅历  date: 2085-01-16 07:33:44  tags: \<span class="token punctuation">[</span>hexo\<span class="token punctuation">]</span>  photos:  \- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg  \- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg</code></pre><blockquote><p>经过测试，文件头上的<em>layout: photo</em>可以省略。</p></blockquote><p>不想每次都手动添加怎么办？同样的，打开您的<em>hexo\scaffolds\photo.md</em></p><pre class=" language-bash"><code class="language-bash">layout: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; &amp;#123; layout &amp;#125; &amp;#125;  </span>title: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; &amp;#123; title &amp;#125; &amp;#125;  </span>date: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; &amp;#123; date &amp;#125; &amp;#125;  </span>tags:  photos:  \-  \-\-\-</code></pre><p>然后每次可以执行带 layout 的 new 命令生成照片文章：</p><pre class=" language-bash"><code class="language-bash">hexo new photo <span class="token string">"photoPostName"</span> <span class="token comment" spellcheck="true">#新建照片文章</span></code></pre><p><strong>description</strong><br>markdown 文件头中也可以添加 description，以覆盖全局配置文件中的 description 内容，请参考下文_<em>config.yml</em>的介绍。</p><pre class=" language-bash"><code class="language-bash">title: hexo 你的博客  date: 2013-11-22 17:11:54  categories: default  tags: \<span class="token punctuation">[</span>hexo\<span class="token punctuation">]</span>  description: 你对本页的描述  \-\-\-</code></pre><blockquote><p>hexo 默认会处理全部 markdown 和 html 文件，如果不想让 hexo 处理你的文件，可以在文件头中加入 layout: false。</p></blockquote><p><strong>文章摘要</strong><br>在需要显示摘要的地方添加如下代码即可：</p><pre class=" language-bash"><code class="language-bash">以上是摘要<span class="token operator">&lt;</span><span class="token operator">!</span>--more--<span class="token operator">></span>以下是余下全文</code></pre><p>more 以上内容即是文章摘要，在主页显示，more 以下内容点击『&gt; Read More』链接打开全文才显示。</p><blockquote><p>hexo 中所有文件的编码格式均是 UTF-8。</p></blockquote><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>萝卜白菜各有所爱，玩博客换主题是必不可少的，hexo 的主题列表<a href="http://github.com/tommy351/hexo/wiki/Themes">Hexo Themes</a>。<br>我比较喜欢<a href="http://github.com/A-limon/pacman">pacman</a>，<a href="http://github.com/heroicyang/hexo-theme-modernist">modernist</a>、<a href="http://github.com/DavidKk/Hexo.ishgo">ishgo</a>，<a href="http://github.com/raytaylorlin/hexo-theme-raytaylorism">raytaylorism</a>。<em>Pacman</em>最为优秀，简洁大方小清新，同时移动版本支持的也很好，但作者并没有把很多参数分离出来给出可配置项，我最终选择了<em>modernist</em>。</p><p>安装主题的方法就是一句 git 命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/heroicyang/hexo-theme-modernist.git themes/modernist</code></pre><blockquote><p>目录是否是 modernist 无所谓，只要与_config.yml 文件一致即可。</p></blockquote><p>安装完成后，打开<em>hexo\_config.yml</em>，修改主题为<em>modernist</em></p><pre class=" language-bash"><code class="language-bash">theme: modernist</code></pre><p>打开<em>hexo\themes\modernist</em>目录，编辑主题配置文件__config.yml_：</p><pre class=" language-bash"><code class="language-bash">menu: <span class="token comment" spellcheck="true">#配置页头显示哪些菜单  </span>\# Home: /   Archives: /archives   Reading: /reading   About: /about  \# Guestbook: /aboutexcerpt_link: Read More <span class="token comment" spellcheck="true">#摘要链接文字  </span>archive_yearly: <span class="token boolean">false</span> <span class="token comment" spellcheck="true">#按年存档</span>widgets: <span class="token comment" spellcheck="true">#配置页脚显示哪些小挂件  </span> \- category  \# - tag   \- tagcloud   \- recent_posts  \# - blogrollblogrolls: <span class="token comment" spellcheck="true">#友情链接  </span> \- bruce sha<span class="token string">'s duapp wordpress: http://ibruce.duapp.com   \- bruce sha'</span>s javaeye: http://buru.iteye.com   \- bruce sha<span class="token string">'s oschina blog: http://my.oschina.net/buru   \- bruce sha'</span>s baidu space: http://hi.baidu.com/iburufancybox: <span class="token boolean">true</span> <span class="token comment" spellcheck="true">#是否开启 fancybox 效果</span>duoshuo_shortname: buru <span class="token comment" spellcheck="true">#多说账号</span>google_analytics:  rss:</code></pre><p>更新主题</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> themes/modernist  <span class="token function">git</span> pull</code></pre><h2 id="评论框"><a href="#评论框" class="headerlink" title="评论框"></a>评论框</h2><p>静态博客要使用第三方评论系统，hexo 默认集成的是<a href="http://disqus.com/">Disqus</a>，因为你懂的，所以国内的话还是建议用<a href="http://duoshuo.com/">多说</a>。<br>直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用 modernist 主题，在<em>modernist_config.yml</em>中配置 duoshuo_shortname 为多说的<strong>基本设置-&gt;域名</strong>中的 shortname 即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于 css 设置，可以<a href="http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017">参考这里</a>，我是在<a href="http://gist.github.com/heroicyang/5644407">HeroicYang</a>的基础上修改的。</p><p>如果你是有的其他第三方评论系统，将通用代码粘贴到<em>hexo\themes\modernist\layout\_partial\comment.ejs</em>里面，如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>config.disqus_shortname <span class="token operator">&amp;&amp;</span> page.comments<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; %></span><span class="token operator">&lt;</span>section id<span class="token operator">=</span><span class="token string">"comment"</span><span class="token operator">></span>   <span class="token comment" spellcheck="true">#你的通用代码  </span><span class="token operator">&lt;</span>% <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; %></span></code></pre><h2 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h2><p>执行 new page 命令</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>在<em>hexo\source_下会生成_about</em>目录，里面有个 index.md，直接编辑就可以了，然后在主题的_<em>config.yml</em>中将其配置显示出来。<br>上述步骤，也可以手工生成，在<em>hexo\source_下手工新建_about</em>和<em>index.md</em>也是完全等价的。</p><blockquote><p>因为 markdown 对 table 的支持不好，我是在 about 中直接建立 index.html，里面书写页面内容，hexo 会帮你加上头和尾。</p></blockquote><h2 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h2><p>GitHub Pages <a href="http://help.github.com/articles/custom-404-pages">自定义 404 页面</a>非常容易，直接在根目录下创建自己的<strong>404.html</strong>就可以。但是自定义 404 页面仅对绑定顶级域名的项目才起作用，GitHub 默认分配的二级域名是不起作用的，使用<em>hexo server</em>在本机调试也是不起作用的。<br>其实，404 页面可以做更多有意义的事，来做个 404 公益项目吧。现在，看下我的 404 页面<a href="http://ibruce.info/nothing">一个 ibruce.info 上不存在的页面</a>，做点有意义的事情，也对得起这个域名。<br>目前有如下几个公益 404 接入地址，我选择了腾讯的。404 页面，每个人可以做的更多。</p><ul><li><a href="http://www.qq.com/404">腾讯公益 404</a></li><li><a href="http://yibo.iyiyun.com/Index/web404">404 公益_益云(公益互联网)社会创新中心</a></li><li><a href="http://404page.missingkids.org.tw/">失蹤兒童少年資料管理中心 404</a></li></ul><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。</p><p>免费用户有每月 10GB 流量+总空间 10GB+PUT/DELETE 10 万次请求+GET 100 万次请求，这对个人博客来说足够，不够的话点这个活动页面，也可通过邀请好友获得奖励，我也求一下<a href="http://portal.qiniu.com/signup?code=3lqr4z3p7clea">七牛邀请</a>。有一点要说明的是，七牛没有目录的概念，但是文件名可以包含*/<em>，比如</em>2013/11/27/reading/photos-0.jpg*，参考这里<a href="http://kb.qiniu.com/key-value-system">关于 key-value 存储系统</a>。</p><p>七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和 JS 文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇<a href="http://linux.cn/thread/11986/1/1">Linux 中国采用七牛云存储支撑图片访问</a>。</p><p>如果非要说不足的话，就是文件管理界面不是很友好，不支持 CNAME 到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。</p><blockquote><p>如果你对七牛 web 版的文件管理界面不满意，可以用官方的<a href="http://docs.qiniu.com/tools/v6/index.html">七牛云存储工具</a>。</p></blockquote><p>您还可以使用如下图床服务 <a href="http://www.farbox.com/">FarBox</a>，<a href="http://www.dropbox.com/">Dropbox</a>，<a href="http://www.upyun.com/">又拍云</a>。</p><h2 id="申请域名（可选）"><a href="#申请域名（可选）" class="headerlink" title="申请域名（可选）"></a>申请域名（可选）</h2><p>GitHubPages 默认为每个用户分配了一个二级域名『your_user_name.github.com』或『your_user_name.github.io』。<br>如果你对上述域名不满意，可以到<a href="http://www.godaddy.com/">狗爹</a>上申请一个自己的域名，然后绑定到 GitHub Pages。绑定方法很简单，在 repo 根目录下建立一个 CNAME 文件，里面写上域名即可。</p><p><strong>GoDaddy</strong><br>买域名首选狗爹，国内的服务商大家都懂的。<br>目前.info 域名只要￥ 18.99，但据说续费比较贵，我是先玩下，一年后再换，至于搜索引擎重新索引之类的，无所谓。.me 和.com 域名稍微贵点，大约￥ 60-100，网上有很多优惠码可用，可惜有的优惠码有限制。比如有个.com 域名优惠码只要$1.99，但只能用国外信用卡购买。更多优惠码可以自行谷歌或到<a href="http://www.dute.me/">独特优惠码</a>找。不着急的同学可以将中意的域名加入购物车先不付款，过几天，狗爹就会发优惠信息给你。狗爹不定期也会有活动，可以多关注。<br>付款后，需要稍微等一会你才会拿到域名，特别是支付宝付款的，要等大约半小时左右。此外域名要一年年的买，这样比较划算。</p><blockquote><p>建议大家申请.com 或.me 域名。据说.info 因垃圾网站太多，被搜索引擎惩罚，而且续费较贵。</p></blockquote><p><strong>DNSPod</strong><br>GoDaddy 的 NameServers 有时会被墙，因此墙裂推荐国内的<a href="http://www.dnspod.cn/">DNSPod</a>解析域名，免费服务真心不错。支持微信/邮件提醒，监控与报警，访问统计，健康诊断，搜索引擎推送，速度哇哇的，对于我来说足够。<br>两步设置就可以搞定，怎么操作参考<a href="http://support.dnspod.cn/Kb/showarticle/tsid/42">Godaddy 注册商域名修改 DNS 地址</a>。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><strong>常用命令：</strong></p><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"postName"</span> <span class="token comment" spellcheck="true">#新建文章  </span>hexo new page <span class="token string">"pageName"</span> <span class="token comment" spellcheck="true">#新建页面  </span>hexo generate <span class="token comment" spellcheck="true">#生成静态页面至 public 目录  </span>hexo server <span class="token comment" spellcheck="true">#开启预览访问端口（默认端口 4000，'ctrl + c'关闭 server）  </span>hexo deploy <span class="token comment" spellcheck="true">#将.deploy 目录部署到 GitHub</span></code></pre><p><strong>常用复合命令：</strong></p><pre class=" language-bash"><code class="language-bash">hexo deploy -g  hexo server -g</code></pre><p><strong>简写：</strong></p><pre class=" language-bash"><code class="language-bash">hexo n <span class="token operator">==</span> hexo new  hexo g <span class="token operator">==</span> hexo generate  hexo s <span class="token operator">==</span> hexo server  hexo d <span class="token operator">==</span> hexo deploy</code></pre><hr><p>至此，基本操作介绍完毕，以下内容普通用户无需了解。</p><h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2><p>默认目录结构：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── .deploy├── public├── scaffolds├── scripts├── <span class="token function">source</span><span class="token operator">|</span>   ├── _drafts<span class="token operator">|</span>   └── _posts├── themes├── _config.yml└── package.json</code></pre><ul><li>.deploy：执行 hexo deploy 命令部署到 GitHub 上的内容目录</li><li>public：执行 hexo generate 命令，输出的静态网页内容目录</li><li>scaffolds：layout 模板文件目录，其中的 md 文件可以添加编辑</li><li>scripts：扩展脚本目录，这里可以自定义一些 javascript 脚本</li><li>source：文章源码目录，该目录下的 markdown 和 html 文件均会被 hexo 处理。该页面对应 repo 的根目录，404 文件、favicon.ico 文件，CNAME 文件等都应该放这里，该目录下可新建页面目录。<ul><li>_drafts：草稿文章</li><li>_posts：发布文章</li></ul></li><li>themes：主题文件目录</li><li>_config.yml：全局配置文件，大多数的设置都在这里</li><li>package.json：应用程序数据，指明 hexo 的版本等信息，类似于一般软件中的<em>关于</em>按钮</li></ul><p>接下来是重头戏__config.yml_，做个简单说明：</p><pre class=" language-bash"><code class="language-bash">\# Hexo Configuration  \#<span class="token comment" spellcheck="true"># Docs: http://zespia.tw/hexo/docs/configure.html  </span>\#<span class="token comment" spellcheck="true"># Source: https://github.com/tommy351/hexo/</span>\# Site <span class="token comment" spellcheck="true">#整站的基本信息  </span>title: 不如 <span class="token comment" spellcheck="true">#网站标题  </span>subtitle: 码农，程序猿，未来的昏析师 <span class="token comment" spellcheck="true">#网站副标题  </span>description: bruce sha<span class="token string">'s blog | java | scala | bi #网站描述，给搜索引擎用的，在生成 html 中的 head->meta 中可看到  author: bruce #网站作者，在下方显示  email: bu.ru@qq.com #联系邮箱  language: zh-CN #语言\# URL #域名和文件结构  \## If your site is put in a subdirectory, set url as '</span>http://yoursite.com/child<span class="token string">' and root as '</span>/child/'  url: http://ibruce.info <span class="token comment" spellcheck="true">#你的域名  </span>root: /  permalink: :year/:month/:day/:title/  tag_dir: tags  archive_dir: archives  category_dir: categories  code_dir: downloads/code\# Writing <span class="token comment" spellcheck="true">#写文章选项  </span>new_post_name: :title.md <span class="token comment" spellcheck="true"># File name of new posts  </span>default_layout: post <span class="token comment" spellcheck="true">#默认 layout 方式  </span>auto_spacing: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># Add spaces between asian characters and western characters  </span>titlecase: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># Transform title into titlecase  </span>external_link: <span class="token boolean">true</span> <span class="token comment" spellcheck="true"># Open external links in new tab  </span>max_open_file: 100  multi_thread: <span class="token boolean">true</span>  filename_case: 0  render_drafts: <span class="token boolean">false</span>  highlight: <span class="token comment" spellcheck="true">#代码高亮  </span> enable: <span class="token boolean">true</span> <span class="token comment" spellcheck="true">#是否启用  </span> line_number: <span class="token boolean">false</span> <span class="token comment" spellcheck="true">#是否显示行号  </span> tab_replace:\# Category <span class="token operator">&amp;</span> Tag <span class="token comment" spellcheck="true">#分类与标签  </span>default_category: uncategorized <span class="token comment" spellcheck="true"># default  </span>category_map:  tag_map:\# Archives <span class="token comment" spellcheck="true">#存档，这里的说明好像不对。全部选择 1，这个选项与主题中的选项有时候会有冲突  </span>\#<span class="token comment" spellcheck="true"># 2: Enable pagination  </span>\#<span class="token comment" spellcheck="true"># 1: Disable pagination  </span>\#<span class="token comment" spellcheck="true"># 0: Fully Disable  </span>archive: 1  category: 1  tag: 1\# Server <span class="token comment" spellcheck="true">#本地服务参数  </span>\#<span class="token comment" spellcheck="true"># Hexo uses Connect as a server  </span>\#<span class="token comment" spellcheck="true"># You can customize the logger format as defined in  </span>\#<span class="token comment" spellcheck="true"># http://www.senchalabs.org/connect/logger.html  </span>port: 4000  logger: <span class="token boolean">true</span>  logger_format:\# Date / Time <span class="token function">format</span> <span class="token comment" spellcheck="true">#日期显示格式  </span>\#<span class="token comment" spellcheck="true"># Hexo uses Moment.js to parse and display date  </span>\#<span class="token comment" spellcheck="true"># You can customize the date format as defined in  </span>\#<span class="token comment" spellcheck="true"># http://momentjs.com/docs/#/displaying/format/  </span>date_format: MMM D YYYY  time_format: H:mm:ss\# Pagination <span class="token comment" spellcheck="true">#分页设置  </span>\#<span class="token comment" spellcheck="true"># Set per_page to 0 to disable pagination  </span>per_page: 10 <span class="token comment" spellcheck="true">#每页 10 篇文章  </span>pagination_dir: page\# Disqus <span class="token comment" spellcheck="true">#社会化评论 disqus，我使用多说，在主题中配置  </span>disqus_shortname:\# Extensions <span class="token comment" spellcheck="true">#插件，暂时未安装插件  </span>\#<span class="token comment" spellcheck="true"># Plugins: https://github.com/tommy351/hexo/wiki/Plugins  </span>\#<span class="token comment" spellcheck="true"># Themes: https://github.com/tommy351/hexo/wiki/Themes  </span>\#<span class="token comment" spellcheck="true"># 主题  </span>theme: modernist <span class="token comment" spellcheck="true"># raytaylorism # pacman # modernist # light  </span>exclude_generator:\# Deployment <span class="token comment" spellcheck="true">#部署  </span>\#<span class="token comment" spellcheck="true"># Docs: http://zespia.tw/hexo/docs/deploy.html  </span>deploy:   type: github   repository: git@github.com:bruce-sha/bruce-sha.github.com.git <span class="token comment" spellcheck="true">#你的 GitHub Pages 仓库</span></code></pre><h2 id="修改局部页面"><a href="#修改局部页面" class="headerlink" title="修改局部页面"></a>修改局部页面</h2><p>页面展现的全部逻辑都在每个主题中控制，源代码在<em>hexo\themes\你使用的主题_中，以_modernist</em>主题为例：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── languages          <span class="token comment" spellcheck="true">#多语言</span><span class="token operator">|</span>   ├── default.yml    <span class="token comment" spellcheck="true">#默认语言</span><span class="token operator">|</span>   └── zh-CN.yml      <span class="token comment" spellcheck="true">#中文语言</span>├── layout             <span class="token comment" spellcheck="true">#布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span><span class="token operator">|</span>   ├── _partial       <span class="token comment" spellcheck="true">#局部的布局，此目录下的*.ejs是对头尾等局部的控制</span><span class="token operator">|</span>   └── _widget        <span class="token comment" spellcheck="true">#小挂件的布局，页面下方小挂件的控制</span>├── <span class="token function">source</span>             <span class="token comment" spellcheck="true">#源码</span><span class="token operator">|</span>   ├── css            <span class="token comment" spellcheck="true">#css源码</span><span class="token operator">|</span>   <span class="token operator">|</span>   ├── _base      <span class="token comment" spellcheck="true">#*.styl基础css</span><span class="token operator">|</span>   <span class="token operator">|</span>   ├── _partial   <span class="token comment" spellcheck="true">#*.styl局部css</span><span class="token operator">|</span>   <span class="token operator">|</span>   ├── fonts      <span class="token comment" spellcheck="true">#字体</span><span class="token operator">|</span>   <span class="token operator">|</span>   ├── images     <span class="token comment" spellcheck="true">#图片</span><span class="token operator">|</span>   <span class="token operator">|</span>   └── style.styl <span class="token comment" spellcheck="true">#*.styl引入需要的css源码</span><span class="token operator">|</span>   ├── fancybox       <span class="token comment" spellcheck="true">#fancybox效果源码</span><span class="token operator">|</span>   └── js             <span class="token comment" spellcheck="true">#javascript源代码</span>├── _config.yml        <span class="token comment" spellcheck="true">#主题配置文件</span>└── README.md          <span class="token comment" spellcheck="true">#用GitHub的都知道</span></code></pre><p>如果你需要修改头部，直接修改<em>hexo\themes\modernist\layout\_partial\header.ejs</em>，比如头上加个搜索框：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//google.com/search<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">accept-charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">autocorrect</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">autocapitalize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Search<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>site:&lt;%- config.url.replace(/^https?:\\/\\//, <span class="token punctuation">'</span><span class="token punctuation">'</span>) %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>将如上代码加入即可，您需要修改 css 以便这个搜索框比较美观。</p><p>再如，你要修改页脚版权信息，直接编辑<em>hexo\themes\modernist\layout\_partial\footer.ejs</em>。同理，你需要修改 css，直接去修改对应位置的 styl 文件。</p><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><blockquote><p>页面上显示访问次数可以使用 <a href="http://busuanzi.ibruce.info/">不蒜子</a>，两行代码即可搞定。</p></blockquote><p>因 Google Analytics 偶尔被墙，故用百度统计，以<em>modernist</em>主题为例，介绍如何添加。<br>编辑文件<em>hexo\themes\modernist\_config.yml</em>，增加配置选项：</p><pre class=" language-bash"><code class="language-bash">baidu_tongji: <span class="token boolean">true</span></code></pre><p>新建文件<em>hexo\themes\modernist\layout\_partial\baidu_tongji.ejs</em>，内容如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.baidu_tongji<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; %></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment" spellcheck="true">#你的百度统计代码</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>% <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; %></span></code></pre><blockquote><p>注册并登录百度统计获取你的统计代码。</p></blockquote><p>编辑文件<em>hexo\themes\modernist\layout\_partial\head.ejs</em>，在<em>『/head』</em>之前增加：</p><p>&lt;%- partial(‘baidu_tongji’) %&gt;</p><p>重新生成并部署你的站点。</p><blockquote><p>不出意外的话，在你的站点的每个页面的左上角都会看到一个恶心的百度 LOGO。你只能在『百度统计首页-&gt;网站列表-&gt;获取代码-&gt;系统管理设置-&gt;统计图标设置-&gt;显示图标』，把那个勾去掉。百度真是恶心，我准备还是用 Google Analytics。</p></blockquote><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>我没有添加分享，觉得这个不是很必要，导致页面看起来啰嗦。以加网为例介绍如何添加：</p><ul><li>在<em>hexo\themes\modernist\layout\_partial\post</em>下新建<em>jiathis.ejs</em>文件。</li><li>注册加网获得你的分享代码，写入<em>jiathis.ejs</em>。</li><li>在<em>hexo\themes\modernist\layout\_partial\article.ejs</em>中，添加*&lt;%-partial(‘post/jiathis’)%&gt;*。</li></ul><p>分享服务还可以使用如下企业提供的技术<a href="http://www.jiathis.com/">加网</a>，<a href="http://www.bshare.cn/">bShare</a>，<a href="http://share.baidu.com/">百度分享</a>。</p><h2 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h2><p>看一下<em>hexo\themes\modernist\layout\_partial\head.ejs</em>，找到这句：</p><link rel="icon" type="image/x-icon" href="<%- config.root %>favicon.ico"><p>你懂的，将你的<em>favicon.ico</em>放到工程根目录下即可，也就是<em>hexo\source</em>目录。可以在<a href="http://www.faviconer.com/">Faviconer</a>制作你的 ico 图标，国内有<a href="http://www.bitbug.net/">比特虫</a>。</p><h2 id="自定义挂件"><a href="#自定义挂件" class="headerlink" title="自定义挂件"></a>自定义挂件</h2><p>除了默认已提供的挂件外，你还可以自定义自己的小挂件，在<em>hexo\themes\modernist\layout\_widget_下，新建自己的 ejs 文件，如_myWidget.ejs</em>，然后在配置文件<em>hexo\themes\modernist\_config.yml</em>中配置。</p><p>widgets:<br> - myWidget</p><p>用上述方法可以添加新浪微博小挂件。</p><ul><li>生成自己的<a href="http://open.weibo.com/widgets?cat=wb">微博组件</a>。</li><li>添加<em>hexo\themes\modernist\layout\_widget\weibo.ejs</em>文件。</li><li>配置<em>hexo\themes\modernist\_config.yml</em>。</li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>安装插件：</p><p>npm install <plugin-name> –save</p><p>启用插件：在*hexo\_config.yml 文件添加：</p><p>plugins:<br>- <plugin-name> #插件名</p><p>升级插件：</p><p>npm update</p><p>卸载插件：</p><p>npm uninstall <plugin-name></p><p><strong>RSS 插件</strong><br>将上述命令中的<em>『plugin-name』</em>，替换为<em>hexo-generator-feed</em>。一旦安装完成，你可以在配置显示你站点的 RSS，文件路径<em>\atom.xml</em>。</p><p>你可以用 rss 作为迁移工具，用如下命令读取其他位置的 rss：</p><p>hexo migrate rss <source></p><blockquote><p><em>『source』</em>是本地或网络文件路径。</p></blockquote><p><strong>Sitemap 插件</strong><br>将上述命令中的<em>『plugin-name』</em>，替换为<em>hexo-generator-sitemap</em>。你可以将你站点地图提交给搜索引擎，文件路径<em>\sitemap.xml</em>。</p><p>更多插件的安装方法，请参考<a href="http://github.com/tommy351/hexo/wiki/Plugins">官方 Wiki</a>。</p><blockquote><p>如果你按照上述步骤做，但插件不起作用，没有生成 atom.xml 和 sitemap.xml，也没有报错，那么你应该 cd 到你的 hexo 初始化目录，在该目录下重新安装插件，重试。</p></blockquote><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>hexo 支持从其他类型站点迁移，如通用 RSS，Jekyll，Octopress，WordPress 等，这一部分我没试过。请参考官方文档<a href="http://zespia.tw/hexo/docs/migration.html">Hexo Migration</a>。</p><h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p>你可以到<a href="http://www.sousuoyinqingtijiao.com/">屈站长</a>提交你的站点给搜索引擎。其他内容如添加站点或页面的 description，提交 Sitemap，添加百度统计，Google Analytics 等等，参考本文其他章节的内容，不再一一阐述。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>更新 hexo：</p><p>npm update -g hexo</p><p>更新主题：</p><p>cd themes/你的主题<br>git pull</p><p>更新插件：</p><p>npm update</p><h2 id="干掉-IE"><a href="#干掉-IE" class="headerlink" title="干掉 IE"></a>干掉 IE</h2><p>Kill IE6 提示的 javascript 代码，请自行搜索。</p><h2 id="换机器"><a href="#换机器" class="headerlink" title="换机器"></a>换机器</h2><p>你要保留好自己的博客源码。换机器写博客，就只能使用各种网盘的同步功能，或者你把你的站点源文件提交到某代码托管服务器。另外，貌似这篇很牛逼，<a href="http://lucifr.com/2013/06/02/hexo-on-cloud-with-dropbox-and-vps/">Hexo 服务器端布署及 Dropbox 同步</a>。</p><p>我的办法是这样的，先在一个目录下做好 Node+Git+Hexo 的绿色环境，写个<em>hexos.bat</em>可以一键启动 hexo 工作台，把整个目录用 Dropbox 同步，这样随便在办公室或家的任何笔记本台式机都可以写博客，也不用处理什么文件拷贝备份的事情，非常爽。</p><h2 id="统计功能"><a href="#统计功能" class="headerlink" title="统计功能"></a>统计功能</h2><p><a href="http://bruce-sha.github.io/2013/12/22/count-views-of-hexo">为 hexo 博客添加访问次数统计功能</a></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p><strong>网站加速</strong><br><a href="http://www.webluker.com/">Webluker-CDN 网站加速 免费 CDN DNS 解析</a><br><a href="http://blog.webluker.com/">Webluker-FAQ 索引</a></p><p><strong>网站监控</strong><br><a href="http://www.jiankongbao.com/">监控宝-网站监控 网页监控 服务器监控</a><br><a href="http://www.jiankongbao.com/faq">监控宝-常见问题</a></p><blockquote><p>DNSPod 本身就有 D 监控可用。</p></blockquote><p><strong>站长工具</strong><br><a href="http://www.google.com/intl/zh-CN/webmasters">谷歌站长工具</a><br><a href="http://zhanzhang.baidu.com/">百度站长工具</a><br><a href="http://tool.chinaz.com/">站长之家工具</a><br><a href="http://zhanzhang.so.com/">360 搜索站长平台</a><br><a href="http://webscan.360.cn/">360 网站安全检测</a><br><a href="http://ce.cloud.360.cn/index">奇云测</a><br><a href="http://jk.cloud.360.cn/">360 云监控</a></p><p><strong>SEO</strong><br><a href="http://www.google.com/intl/zh-CN/webmasters/docs/search-engine-optimization-starter-guide-zh-cn.pdf">谷歌搜索引擎优化初学者指南.PDF</a></p><p><strong>数据统计</strong><br><a href="http://busuanzi.ibruce.info/">不蒜子</a><br><a href="http://tongji.baidu.com/">百度统计</a><br><a href="http://www.google.com/analytics/web/?hl=zh-CN">Google Analytics</a></p><p><strong>企业邮箱</strong><br><a href="http://exmail.qq.com/">腾讯企业邮箱</a><br><a href="http://service.exmail.qq.com/cgi-bin/help?subtype=1&&id=20012&&no=1000931">在 DNSPod 域名解析商处如何设置企业邮箱</a></p><p><strong>图片生成</strong><br><a href="http://pic.sdodo.com/tool/mailpic">邮箱地址生成图片</a><br><a href="http://www.makepic.com/email.php">MakePic.com 邮址图片生成</a></p><p><strong>徽章生成</strong><br><a href="http://creatr.cc/creatr">Logo Creatr</a><br><a href="http://www.simwebsol.com/imagetool">Web 2.0 Logo Creator</a> <em>(可能需翻墙)</em></p><p><strong>favicon 制作</strong><br><a href="http://tool.lu/favicon">Favicon 制作</a></p><p><strong>文章推荐/猜你喜欢</strong><br><a href="http://www.wumii.com/widget/relatedItems">无觅关联推荐</a><br><a href="http://www.ujian.cc/">友荐</a><br><a href="http://www.lezhi.me/">乐知推荐</a><br><a href="http://tuijian.baidu.com/">百度推荐</a></p><p><strong>广告</strong><br><a href="http://union.baidu.com/">百度联盟</a></p><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ul><li>配置文件缺少空格会报错</li><li>报错不能得到精确定位，只能靠经验</li><li>换台机器写文章不好处理</li><li>如何统计总来访数和单页文章阅读次数，请参考<a href="http://bruce-sha.github.io/2013/12/22/count-views-of-hexo">为 hexo 博客添加访问次数统计功能</a>。</li></ul><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>我的博客<a href="http://bruce-sha.github.io/">『ibruce.info』</a>基本算是免费做出来的，为报答开源社区，特写这篇文章，由于水平有限，错误之处在所难免，请诸位多多包涵，不吝指点。</p><p>在此一并感谢<a href="http://github.com/">GitHub</a>，<a href="http://github.com/tommy351/hexo">Hexo</a>，<a href="http://github.com/heroicyang/hexo-theme-modernist">Modernist</a>，<a href="http://www.qiniu.com/">七牛</a>，<a href="http://duoshuo.com/">多说</a>，<a href="http://www.qq.com/404">公益 404</a>，<a href="http://www.godaddy.com/">GoDaddy</a>，<a href="http://www.dnspod.cn/">DNSPod</a>，<a href="http://tongji.baidu.com/">百度统计</a>，<a href="http://www.google.com/analytics/web/?hl=zh-CN">Google Analytics</a>，以及<a href="http://nodejs.org/">Node.js</a>，<a href="https://code.google.com/p/msysgit">MSYSGit</a>，<a href="http://www.sublimetext.com/">Sublime Text 2</a>，最后感谢<a href="http://xbeta.org/wiki/show/Markdown">Markdown</a>。</p><blockquote><p>关于以上内容的任何问题，您都可以对 <a href="http://bruce-sha.github.io/2013/11/22/hexo-your-blog">bruce</a> 留言或邮件 <strong><a href="mailto:&#x62;&#117;&#46;&#x72;&#117;&#x40;&#113;&#113;&#x2e;&#99;&#111;&#x6d;">&#x62;&#117;&#46;&#x72;&#117;&#x40;&#113;&#113;&#x2e;&#99;&#111;&#x6d;</a></strong>。</p></blockquote><h2 id="ps：（2014-年-12-月-更新）"><a href="#ps：（2014-年-12-月-更新）" class="headerlink" title="ps：（2014 年 12 月 更新）"></a>ps：（2014 年 12 月 更新）</h2><ol><li> 当本地调试出现诡异现象时候，请先使用 <em>hexo clean</em> 清理已经生成的静态文件后重试。</li><li> GitHub 官方之前发邮件给用户，已经不建议使用 A 记录指向静态 ip 了，建议 CNAME 指向你的 GitHub Pages URL。</li><li> 如果你申请了自己的域名，您可以使用 DNSPod+<a href="http://domain.mail.qq.com/">QQ 域名邮箱</a> 打造自己的专属邮箱，比如我的 <strong><a href="mailto:&#109;&#x65;&#x40;&#105;&#98;&#x72;&#x75;&#99;&#x65;&#x2e;&#105;&#110;&#102;&#111;">&#109;&#x65;&#x40;&#105;&#98;&#x72;&#x75;&#99;&#x65;&#x2e;&#105;&#110;&#102;&#111;</a></strong>，是不是逼格又提高了一丁点？</li><li> 添加 Fork me on Github 彩带，请戳 <a href="http://github.com/blog/273-github-ribbons">http://github.com/blog/273-github-ribbons</a> 。</li><li> 注意看本页最下方的访问次数统计，这不是一个普通的计数器，这个计数器骨骼精奇天赋异禀，他是实时的！你打开两个浏览窗口，只刷新一个窗口另一个窗口的数字会自动实时变化的，有点意思吧？怎么做的呢，先上个图，当然，这张看板的全部内容也都是实时动态变化着的 ^_^</li></ol><p><a href="http://bruce.u.qiniudn.com/2014/12/firebase-counter.jpg" title="counter"><img src="http://bruce.u.qiniudn.com/2014/12/firebase-counter.jpg" alt="counter"></a>counter</p><h2 id="ps：（2015-年-4-月-更新）"><a href="#ps：（2015-年-4-月-更新）" class="headerlink" title="ps：（2015 年 4 月 更新）"></a>ps：（2015 年 4 月 更新）</h2><ol><li> 折腾了两天，终于搞定 GitHub 不间断被墙导致网站无法访问的问题。方法就是 GitHub 作为主站，GitCafe 作为备份。因为我的 hexo 版本很低，不得不先升级到 hexo3，各种坑，不建议升级，最后自己修改主题，又是各种坑，快累尿了。</li><li> <strong>号外号外：</strong>最新的统计服务已经开放，两行代码轻松搞定，你可以直接使用：**<a href="http://service.ibruce.info/">不蒜子</a>** 微服务，本人墙裂推荐，只需要两行代码哦。各种用法实例和显示效果参考<a href="http://ibruce.info/2015/04/04/busuanzi">不蒜子文档</a>中的实例链接。不蒜子，极客的算子，极简的算子，任你发挥的算子。</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li> <a href="http://zespia.tw/hexo">Hexo</a></li><li> <a href="http://www.7yeshu.com/2013/09/03/hexo">使用 Hexo 在 Github 上搭建个人博客</a></li><li> <a href="http://sys.la/2013/09/07/hexo">hexo 教程</a></li><li> <a href="http://zipperary.com/2013/05/30/hexo-guide-4">hexo 系列教程：（四）hexo 博客的优化技巧</a></li><li> <a href="http://zipperary.com/2013/06/02/hexo-guide-5">hexo 系列教程：（五）hexo 博客的优化技巧续</a></li><li> <a href="http://heroicyang.com/2013/05/22/hexo-theme-modernist">_折腾了个新主题</a></li><li> <a href="http://yangjian.me/workspace/building-blog-with-hexo">使用 hexo 搭建博客</a></li><li> <a href="http://lucifr.com/2013/01/02/from-octopress-to-hexo">从 Octopress 到 Hexo</a></li><li> <a href="http://blog.archean.me/2013/10/20/fulfil-with-hexo-theme">搞定 Hexo</a></li><li><a href="http://mekong.github.io/2013/06/hello-world">Hello World by Hexo</a></li><li><a href="http://popozhu.github.io/2013/06/15/hexo%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE">hexo 的代码高亮</a></li><li><a href="http://blog.ishgo.cn/2013/09/15/ishgohexo%E5%9B%A2%E9%98%9F%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98">用 Hexo 快速打造静态博客_</a></li><li><a href="http://www.ituring.com.cn/article/6815">使用 Sublime Text 2 编辑 Markdown</a></li><li><a href="http://jiabin.tk/2013/07/01/add-page-404-for-my-blog">给 hexo 添加一个 404 页面</a></li><li><a href="http://www.worldhello.net/gotgithub/index.html">GotGitHub</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">搭建一个免费的，无限流量的 Blog — github Pages 和 Jekyll 入门</a></li><li><a href="https://support.dnspod.cn/Kb/showarticle/tsid/42">Godaddy 注册商域名修改 DNS 地址</a></li><li><a href="http://devework.com/wordpress-qiniu.html">WordPress 中使用七牛云存储加速图片等静态文件访问速度</a></li><li><a href="http://www.zhihu.com/question/19594033?group_id=121391355">怎样搭建一个自有域名的 WordPress 博客</a></li><li><a href="http://lucifr.com/2013/06/02/hexo-on-cloud-with-dropbox-and-vps">Hexo 服务器端布署及 Dropbox 同步</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法总结</title>
      <link href="posts/e08b1da7/"/>
      <url>posts/e08b1da7/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。<span id="more"></span></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，两个#是二级标题，以此类推。支持六级标题。这也将作为文章目录标签出现在目录栏，如右侧的<font color=#29C6CD>【快速索引】</font></p><p>注：标准语法一般在#后跟个空格再写文字，有的地方不加也行。</p><p><font color=#44B8E1>Markdown语法示例：</font></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这是一级标题</span><span class="token comment" spellcheck="true">## 这是二级标题</span><span class="token comment" spellcheck="true">### 这是三级标题</span><span class="token comment" spellcheck="true">#### 这是四级标题</span><span class="token comment" spellcheck="true">##### 这是五级标题</span><span class="token comment" spellcheck="true">###### 这是六级标题</span></code></pre><br><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>加粗<br>要加粗的文字左右分别用两个*号包起来</p><p>斜体<br>要倾斜的文字左右分别用一个*号包起来</p><p>斜体加粗<br>要倾斜和加粗的文字左右分别用三个*号包起来</p><p>删除线<br>要加删除线的文字左右分别用两个~~号包起来</p><p><font color=#44B8E1>Markdown语法示例：</font></p><pre class=" language-bash"><code class="language-bash">**这是加粗的文字***这是倾斜的文字****这是斜体加粗的文字***~~这是加删除线的文字~~</code></pre><p><font color=#44B8E1>效果如下：</font></p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><em><strong>这是斜体加粗的文字</strong></em><br><del>这是加删除线的文字</del><br><br></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。但效果可能会有细微差别。</p><p><font color=#44B8E1>Markdown语法示例：</font></p><pre class=" language-bash"><code class="language-bash">-------********</code></pre><p><font color=#44B8E1>效果如下：</font></p><hr><hr><hr><hr><br><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3></li></ul><p><font color=#44B8E1>Markdown语法示例：</font></p><pre class=" language-bash"><code class="language-bash">- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格；无序列表用 - + * 任何一种都可以。</code></pre><p><font color=#44B8E1>效果如下：</font></p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><hr><ul><li><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3></li></ul><p><font color=#44B8E1>Markdown语法示例：</font></p><pre class=" language-bash"><code class="language-bash">1. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格</code></pre><p><font color=#44B8E1>效果如下：</font></p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><hr><ul><li><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3></li></ul><p>上一级和下一级之间敲三个空格即可</p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li></ul><br><ul><li>一级无序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><br><ol><li>一级有序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li></ol><br><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><font color=#44B8E1>Markdown语法注释：</font></p><table><tr><td bgcolor=#FFFACD>表头|表头|表头<br>------|:----:|------:<br>内容|内容|内容<br>内容|内容|内容<br><p>第二行分割表头和内容。</p><ul><li>有一个就行，为了对齐，多加了几个。文字默认居左。</li><li>两边加: 表示文字居中。</li><li>右边加: 表示文字居右。<br>注：原生的语法两边都要用 | 包起来。此处省略</td></tr></table></li></ul><p><font color=#44B8E1>Markdown语法示例：</font></p><pre class=" language-bash"><code class="language-bash">序号<span class="token operator">|</span>测试项目<span class="token operator">|</span>结果:-<span class="token operator">|</span>:-<span class="token operator">|</span>:-1<span class="token operator">|</span>第一个测试项目<span class="token operator">|</span>合格2<span class="token operator">|</span>第二个测试项目<span class="token operator">|</span>良好3<span class="token operator">|</span>第三个测试项目<span class="token operator">|</span>不合格</code></pre><p><font color=#44B8E1>效果如下：</font></p><table><thead><tr><th align="left">序号</th><th align="left">测试项目</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">第一个测试项目</td><td align="left">合格</td></tr><tr><td align="left">2</td><td align="left">第二个测试项目</td><td align="left">良好</td></tr><tr><td align="left">3</td><td align="left">第三个测试项目</td><td align="left">不合格</td></tr></tbody></table><br><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如：加两个&gt;&gt; 三个&gt;&gt;&gt; 或是加n个…<br>嵌套没有限制</p><p><font color=#44B8E1>Markdown语法示例：</font></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">></span>这是引用的内容<span class="token operator">>></span>这是嵌套在第二层引用的内容<span class="token operator">>></span><span class="token operator">>></span>这是嵌套在第四层引用的内容</code></pre><p><font color=#44B8E1>效果如下：</font></p><blockquote><p>这是引用的内容</p><blockquote><p>这是嵌套在第二层引用的内容</p><blockquote><blockquote><p>这是嵌套在第四层引用的内容</p></blockquote></blockquote></blockquote></blockquote><br><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><font color=#44B8E1>Markdown语法注释：</font></p><table><tr><td bgcolor=#FFFACD>[超链接名](超链接地址 "超链接title")title可加可不加</td></tr></table><p><font color=#44B8E1>Markdown语法示例：</font></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>百度<span class="token punctuation">]</span><span class="token punctuation">(</span>http://baidu.com<span class="token punctuation">)</span></code></pre><p><font color=#44B8E1>效果如下：</font></p><p>【<a href="http://baidu.com/">百度</a>】</p><blockquote><p>注：Markdown本身语法不支持链接在新页面中打开，如果想要在新页面中打开的话可以用html语言的a标签代替。<br><br></p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h3><p>代码之间分别用一个反引号包起来</p><p><font color=#44B8E1>Markdown语法示例：</font></p><pre class=" language-bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span>代码内容<span class="token variable">`</span></span></code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><p><font color=#44B8E1>Markdown语法示例：</font></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>``<span class="token variable"><span class="token variable">`</span><span class="token punctuation">)</span>  代码<span class="token punctuation">..</span>.  代码<span class="token punctuation">..</span>.  代码<span class="token punctuation">..</span>.<span class="token punctuation">(</span><span class="token variable">`</span></span>``<span class="token punctuation">)</span></code></pre><blockquote><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p></blockquote><hr><p>以上列举的关于Markdown的语法基本上可以满足一般博客页面编辑的需求，当然Markdown的潜力远不止于此（包括结合HTML+CSS），更多的使用方法可以访问 <a href="http://www.markdown.cn/">Markdown中文网</a>。</p><hr><p>最后一次修订于：[2019/6/12]</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语语法（四）：时态选择</title>
      <link href="posts/1eec6e48/"/>
      <url>posts/1eec6e48/</url>
      
        <content type="html"><![CDATA[<p>照例开头得有个抱怨：距离这个系列的<a href="/2015/05/03/tense-of-verb/">上一篇文章</a>的发表已经有一年多了，我真是懒啊懒啊懒……然而博客上至今也有一百二十多篇文章了，说明我还是笔根不辍的嘛，只是能写且想写的东西比较多，所以这个系列就这么落下了。</p><p><a href="https://www.zhihu.com/people/simonlearn">Simon</a> 老师在知乎上<a href="https://zhuanlan.zhihu.com/p/21656610">发表了一篇文章</a>，题为「换一种方式理解英语时态」。核心内容，是将时间与状态分开（原文中作：时与体），分别考量。文章内容确实是明白无误的，但是我却以为文章缺少了很关键的一部分：拿到一句话，到底应该选择何种时态呢——所谓「论理者多，致用者少」？</p><p>本篇将在前作的基础上，与 Simon 老师的文章互通有无，希冀能够解决「时态选择困难症」。为了力求简便，本文的用词会相当精炼。</p><h2 id="时间、状态和语态"><a href="#时间、状态和语态" class="headerlink" title="时间、状态和语态"></a>时间、状态和语态</h2><p>英文中，谓语动词的具体形式，需要在时间、状态和语态上做区分。</p><h3 id="语态"><a href="#语态" class="headerlink" title="语态"></a>语态</h3><p>我们从最简单的语态说起，它分为两种</p><ul><li>主动语态；</li><li>被动语态。</li></ul><p>这很好理解。「我打了人」这个就是主动语态，「我被人打了」这就是被动语态。谓语动词的形式在语态上的变化如下（以动词 <code>do</code> 为例）。</p><table><thead><tr><th align="left">主动语态</th><th align="left">被动语态</th></tr></thead><tbody><tr><td align="left"><code>动词原形</code>: <em>do</em></td><td align="left"><code>be 动词 + 动词过去分词</code>: <em>be done</em></td></tr></tbody></table><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>英语中动作的状态分为两类四种：</p><ul><li><p>简单式</p><ul><li>一般式</li><li>进行式</li></ul></li><li><p>完成式</p><ul><li>完成式</li><li>完成进行式</li></ul></li></ul><table><thead><tr><th align="left"></th><th align="left">简单式</th><th align="left">完成式</th></tr></thead><tbody><tr><td align="left"><strong>一般形态</strong></td><td align="left"><code>动词 + 宾语/补语/表语</code>: <em>do sth</em></td><td align="left"><code>have + 动词过去分词 + 宾语/补语/表语</code>: <em>have done sth</em></td></tr><tr><td align="left"><strong>发生的时间</strong></td><td align="left">发生在一段时间内</td><td align="left">发生在一段时间内，并有截止时间</td></tr><tr><td align="left"><strong>时间轴</strong></td><td align="left">时间轴上的一个区间</td><td align="left">时间轴上的一个箭头（指向截止时间）</td></tr><tr><td align="left"><strong>注释</strong></td><td align="left">这一时间段，可以长至无穷大，也可以短至一个时间点</td><td align="left">这一截止时间，可以是句中明确给出，也可以借由上下文推论出</td></tr></tbody></table><p>上述表格中，一般形态里只列举了两种一般式。为了解决进行式的问题，我们先来看一下传统语法中四种动作状态的一般形式。</p><table><thead><tr><th align="left"></th><th align="left">简单式</th><th align="left">完成式</th></tr></thead><tbody><tr><td align="left"><strong>一般式</strong></td><td align="left"><em>do sth</em></td><td align="left"><em>have done sth</em></td></tr><tr><td align="left"><strong>进行式</strong></td><td align="left"><em>be doing (sth)</em></td><td align="left"><em>have been doing (sth)</em></td></tr></tbody></table><p>不难发现，不论是简单式还是完成式，其中的进行式都可以看做是相对于一般式的一种变化：</p><ul><li><strong>将 <em>be</em> 看做是一种特殊的动词</strong>；</li><li><strong>将 <em>doing (sth)</em> 看做是接在 <em>be</em> 后面的名词结构</strong>。</li></ul><p>因此，考虑到进行式只不过（可以看做）是一般式的一种变化，所以在考虑下面考虑时间对动词形式的影响时，可以在一定程度上把他们归为一类：即<strong>只考虑应当选用简单式还是完成式，暂不考虑使用一般式还是进行式的问题</strong>。</p><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>上面我们将动作的状态分成了两类：简单式、完成式。所以在探讨时间的过程中，我们也就需要分别对两类状态做讨论。</p><table><thead><tr><th align="left"></th><th align="left">简单式</th><th align="left">完成式</th></tr></thead><tbody><tr><td align="left"><strong>现在</strong></td><td align="left">时间轴上的区间包含「现在」这个时间点</td><td align="left">时间轴上箭头指向的时间点是「现在」</td></tr><tr><td align="left"><strong>过去</strong></td><td align="left">时间轴上的区间完全在「现在」的左边（过去）</td><td align="left">时间轴上的箭头指向的时间点在「现在」的左边（过去）</td></tr><tr><td align="left"><strong>将来</strong></td><td align="left">时间轴上的区间完全在「现在」的右边（将来）</td><td align="left">时间轴上箭头指向的时间点在「现在」的右边（将来）</td></tr></tbody></table><p>至于<strong>过去将来</strong>，这是站在过去的某个时间点探讨某件事情，最常用于虚拟语气中——虚拟语气就是站在过去的时间点上，否定掉已经发生的某些事情，探讨将来的可能性。</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><blockquote><p>作者： <strong><em>ALL CLEAR!!!</em></strong></p><p>读者：你说啥？啥 ALL CLEAR？还是搞不明白嘛！</p><p>作者：现在就到了见证奇迹的时刻了！</p></blockquote><p>关于时态选择的东西，都在下面这张流程图里了。你只需要按照流程图走一遍，把黄色框框里的内容记录下来，就能知道自己需要使用什么时态了。</p><p><img src="..%5Cassets%5Cimg%5Ctense-flowchart.png" alt="时态选择流程图"></p><h2 id="实际使用看看"><a href="#实际使用看看" class="headerlink" title="实际使用看看"></a>实际使用看看</h2><blockquote><p>奥巴马是美国总统。</p></blockquote><ul><li>首先，这句话没有明示或者暗示截止时间，所以流程图里第一个问题填「否」。</li><li>接下来，奥巴马从上任到离职，包括了「现在（2016-07-31）」这个时间点，所以第二个问题填「包含现在」。</li><li>再然后，这里不涉及「持续」或者「正在发生」的含义，所以第三个问题填「否」。</li><li>最后，这是个主动语态。</li></ul><p>所以，最终的结果是，我们要用「一般现在时的主动语态」：<em>Obama is the U.S. President.</em></p><blockquote><p>妈妈爱孩子。</p></blockquote><ul><li>首先，这句话没有明示或者暗示截止时间，所以流程图里第一个问题填「否」。</li><li>接下来，从古至今还有以后所有的妈妈都爱孩子，包括了「现在」这个时间点，所以第二个问题填「包含现在」。</li><li>再然后，这里不涉及「持续」或者「正在发生」的含义，所以第三个问题填「否」。</li><li>最后，这是个主动语态。</li></ul><p>所以，最终的结果是，我们要用「一般现在时的主动语态」：<em>All mothers love their children</em>. <strong>注意，此处「从古至今还有以后所有的妈妈都爱孩子」预示着这是一条「真理」。真理要用一般现在时，就是这样来的。</strong></p><blockquote><p>证人心脏病发作时正在法庭上接受询问。</p></blockquote><ul><li>首先，这句话没有明示或者暗示截止时间，所以流程图里第一个问题填「否」。</li><li>接下来，心脏病发作时在「现在」之前，所以第二个问题填「在过去」。</li><li>再然后，这里涉及「正在发生」的含义，所以第三个问题填「是」。</li><li>最后，这是个被动语态。</li></ul><p>所以，最终结果是，我们要用「过去进行时的被动语态」：<em>The witness was being questioned in court when he had a heart attack</em>.</p><blockquote><p>明天下午五点过来就好。你的车子那时会修好。</p></blockquote><ul><li>首先，这句话明示了截止时间，所以流程图里第一个问题填「是」。</li><li>接下来，截止时间是明天下午五点，在未来，所以第二个问题填「截至将来」。</li><li>再然后，这里不涉及「持续」或者「正在发生」的含义，所以第三个问题填「否」。</li><li>最后，这是个被动语态。</li></ul><p>所以，最终结果是，我们要用「将来完成时的被动语态」：<em>Come back at 17:00. Your car will have been fixed by then</em>.</p><blockquote><p>两分钟后，她就煲电话粥整整仨小时了。</p></blockquote><ul><li>首先，这句话明示了截止时间，所以流程图里第一个问题填「是」。</li><li>接下来，截止时间是两分钟后，在未来，所以第二个问题填「截至将来」。</li><li>再然后，这里涉及「持续」的含义，所以第三个问题填「是」。</li><li>最后，这是个主动语态。</li></ul><p>所以，最终结果是，我们要用「将来完成进行时的主动语态」：<em>In another two more minutes, she will have been talking on the phone for three hours</em>.</p><blockquote><p>我确定我在哪见过这张脸。</p></blockquote><ul><li>首先，这句话暗示了截止时间（截至现在见过），所以流程图里第一个问题填「是」。</li><li>接下来，截止时间是现在，所以第二个问题填「截至现在」。</li><li>再然后，这里不涉及「持续」或者「正在发生」的含义，所以第三个问题填「否」。</li><li>最后，这是个主动语态。</li></ul><p>所以，最终结果是，我们要用「现在完成时的主动语态」：<em>I’m sure that I have seen this face somewhere</em>.</p><blockquote><p>昨天我就已经连续加班 18 天了！</p></blockquote><ul><li>首先，这句话暗示了截止时间，所以流程图里第一个问题填「是」。</li><li>接下来，截止时间是昨天，在现在之前，所以第二个问题填「截至过去」。</li><li>再然后，这里涉及「持续」的含义，所以第三个问题填「是」。</li><li>最后，这是个主动语态。</li></ul><p>所以，最终结果是，我们要用「过去完成进行时的主动语态」：<em>Till yesterday, I had been working overtime for 18 days!</em></p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语语法（三）：动词时态</title>
      <link href="posts/aa58616/"/>
      <url>posts/aa58616/</url>
      
        <content type="html"><![CDATA[<p>这个系列的 <a href="/2014/06/22/noun-phrase-and-articles/">上一篇文章</a> 已经快一年了。我真是懒啊……</p><p>中文的谓语动词不在时间、状态、语态上作区分。在中文中，这些功能由其它副词提供。在英文中，动词的形态需要根据时间、状态、语态发生改变。对于中国人来说，这样的变化确实有些不自然；选错时态也是中国人讲英文时经常犯的错误。</p><p>在这里，语态和说话人的态度相关，比较容易感受。同时，语态反应在动词形态上的变化也相对简单，只需要加上合适的 <code>be</code> 动词，配上动词的过去分词即可。时态和动作发生的时间相关，也相对直观。因此，如果我们能对状态做一些简化，从状态出发去讨论时态，则问题会简单得多。</p><h2 id="状态的简化"><a href="#状态的简化" class="headerlink" title="状态的简化"></a>状态的简化</h2><p>在现代英语中，状态分为</p><ul><li>一般状态（如：一般现在式）</li><li>进行状态（如：一般进行式）</li><li>完成状态（如：现在完成式）</li></ul><p>其中，进行状态的语法特征是 <code>be + 动词的现在分词（V-ing）</code>。如果我们「暂时忘掉」进行状态这个概念，把上述结构看做是 <code>be</code> 动词加上补语（表语）的结构，那这个结构和传统语法中的「一般状态」就没什么区别了。只不过，进行状态的动词是个 <code>be</code> 动词而已。也就是说，我们完全可以把进行状态看做是一种特殊的一般状态，它的谓语动词是个空的 <code>be</code> 动词。</p><p>因此，我们可以将一般状态和进行状态合并在一起，称之为「简单式」。为了统一称呼，我们把完成状态叫做「完成式」。</p><p>注意，这里的简化并不受语态影响。相对主动语态，被动语态不过是 <code>be + 动词的过去分词（V-ed）</code>而已。我们依然可以把被动语态当做 <code>be</code> 动词加上补语（表语）的结构。这样，语态完全不影响上述简化过程。</p><h2 id="简单式"><a href="#简单式" class="headerlink" title="简单式"></a>简单式</h2><p>简单式有几个重要的特征：</p><ul><li><strong>简单式的动作，其发生的具体时间是一个特定的时间段</strong></li><li><strong>动作发生的时间段可大可小，可以延伸至无穷远的过去或无穷远的将来，也可以缩小至一个具体的时间点</strong></li><li><strong>如果动作发生的时间段</strong><ul><li>包括「现在」这个时间点，那么用现在时态</li><li>不包括「现在」这个时间点，且位于现在之前，那么用过去时态</li><li>不包括「现在」这个时间点，且位于现在之后，那么用将来时态</li></ul></li></ul><p>第一个特征，给了我们明确的信息来确定我们是否应该使用简单式（而不是完成式）。第二和第三个特征，则为我们选择时态提供了依据。</p><h3 id="过去时态"><a href="#过去时态" class="headerlink" title="过去时态"></a>过去时态</h3><blockquote><p>The U.S.A <em>established</em> diplomatic relations with the P.R.C <em>in 1979</em>.</p></blockquote><ul><li>动作发生的时间段是 _1979 年_，这是一个特定的时间段，所以应该用简单式</li><li>这个时间段不包括现在这个时间点，且位于现在之前，所以应该用过去时态</li><li>这里不涉及到被动的语态，也不涉及到「持续」或者「正在发生」的含义，所以不需要额外的 <code>be</code> 动词</li></ul><p>因此，动词 <code>establish</code> 应该用过去式 <code>established</code>。这是传统语法的「一般过去式」。</p><blockquote><p>The movable print <em>was</em> introduced to England <em>in 1485</em>.</p></blockquote><ul><li>动作发生的时间段是 _1485 年_，这是一个特定的时间段，所以应该用简单式</li><li>这个时间段不包括现在这个时间点，且位于现在之前，所以应该用过去时态</li><li>这里涉及到被动的语态，但不涉及到「持续」或者「正在发生」的含义，所以需要用 <code>be + V-ed</code> 的形态</li></ul><p>因此，我们需要用 <code>be</code> 动词的过去形态 <code>was</code>，以及 <code>introduced</code> 这个过去分词。这是传统语法的「一般过去式被动语态」。</p><blockquote><p>I <em>was</em> visiting clients <em>the whole day yesterday</em>.</p></blockquote><ul><li>动作发生的时间段是 _昨天一整天_，这是一个特定的时间段，所以应该用简单式</li><li>这个时间段不包括现在这个时间点，且位于现在之前，所以应该用过去时态</li><li>这里不涉及到被动的语态，但涉及到「持续」的含义，所以需要用 <code>be + V-ing</code> 的形态</li></ul><p>因此，我们需要用 <code>be</code> 动词的过去形态 <code>was</code>，以及 <code>visiting</code> 这个现在分词。这是传统语法的「过去进行式」。</p><blockquote><p>I <em>was</em> watching TV, <em>when I heard the door bell</em>.</p></blockquote><ul><li>动作发生的时间段是 _听到门铃响的瞬间_，这是一个特定的时间段，退化为一个时间点，所以应该用简单式</li><li>这个时间段不包括现在这个时间点，且位于现在之前，所以应该用过去时态</li><li>这里不涉及到被动的语态，但涉及到「正在发生」的含义，所以需要用 <code>be + V-ing</code> 的形态</li></ul><p>因此，我们需要用 <code>be</code> 动词的过去形态 <code>was</code>，以及 <code>watching</code> 这个现在分词。这是传统语法的「过去进行式」。</p><blockquote><p>The witness <em>was</em> being questioned in court <em>when he had a heart attack</em>.</p></blockquote><ul><li>动作发生的时间段是 _心脏病发作的瞬间_，这是一个特定的时间段，退化为一个时间点，所以应该用简单式</li><li>这个时间段不包括现在这个时间点，且位于现在之前，所以应该用过去时态</li><li>这里涉及到被动的语态，所以需要用 <code>be + V-ed</code>；同时，这里也涉及到「正在发生」的含义，所以需要用 <code>be + V-ing</code> 的形态</li></ul><p>因此，我们需要用 <code>be</code> 动词的过去形态 <code>was</code>，同时还需要 <code>being</code> 作为 <code>V-ing</code> 部分，然后还需要 <code>question</code> 的过去分词 <code>questioned</code>。这是传统语法的「过去进行式被动语态」。</p><h3 id="现在时态"><a href="#现在时态" class="headerlink" title="现在时态"></a>现在时态</h3><blockquote><p>Obama <em>is</em> the U.S. President.</p></blockquote><ul><li>动作发生的时间段是 _几年前奥巴马上任之时到几年后奥巴马卸任之时_，这是一个特定的时间段，所以应该用简单式</li><li>这个时间段包括现在这个时间点，所以应该用现在时态</li><li>这里不涉及到被动的语态，也不涉及到「持续」或者「正在发生」的含义，所以不需要额外的 <code>be</code> 动词</li></ul><p>因此，我们需要用 <code>is</code>。这是传统语法的「一般现在式」。</p><blockquote><p>Kyrie <em>steals</em> the ball and <em>passes</em> it to LeBron.</p></blockquote><ul><li>这是体育解说员在播报克利夫兰骑士队的比赛，动作发生的时间段是 _现在_，这是一个特定的时间段，所以应该用简单式</li><li>这个时间段包括现在这个时间点，所以应该用现在时态</li><li>这里不涉及到被动的语态，也不涉及到「持续」或者「正在发生」的含义，所以不需要额外的 <code>be</code> 动词</li></ul><p>因此，我们分别需要用 <code>steal</code> 和 <code>pass</code> 单数第三人称形式 <code>steals</code> 和 <code>pass</code>。这是传统语法的「一般现在式」。</p><blockquote><p>All mothers <em>love</em> their children.</p></blockquote><ul><li>动作发生的时间段是 _无穷远的过去到无穷远的将来_，也就是所谓的真理，这是一个特定的时间段，所以应该用简单式</li><li>这个时间段包括现在这个时间点，所以应该用现在时态</li><li>这里不涉及到被动的语态，也不涉及到「持续」或者「正在发生」的含义，所以不需要额外的 <code>be</code> 动词</li></ul><p>因此，我们需要用 <code>love</code> 的原型。这是传统语法的「一般现在式」。</p><p>这就是为什么，传统语法说「真理要用一般现在式」。其实理解了我们的原理，就不需要被这些「特例」了。</p><blockquote><p>Walmart <em>is</em> selling big cokes at a discount <em>this mouth</em>.</p></blockquote><ul><li>动作发生的时间段是 _这个月_，这是一个特定的时间段，所以应该用简单式</li><li>这个时间段包括现在这个时间点，所以应该用现在时态</li><li>这里不涉及到被动的语态，但涉及到「持续」的含义，所以需要用 <code>be + V-ing</code> 形式</li></ul><p>因此，我们需要用 <code>be</code> 动词的单三形式 <code>is</code>，跟着 <code>sell</code> 的现在分词 <code>selling</code>。这是传统语法的「现在进行式」。</p><blockquote><p>According to the NASA survey, the ozone layer <em>is</em> being depleted.</p></blockquote><ul><li>动作发生的时间段是 _从臭氧层开始被消耗的时候到将来臭氧层不在被消耗的时候_，这是一个特定的时间段，所以应该用简单式</li><li>这个时间段包括现在这个时间点，所以应该用现在时态</li><li>这里涉及到被动的语态，所以需要用 <code>be + V-ed</code>；同时，这里也涉及到「正在发生」的含义，所以需要用 <code>be + V-ing</code> 的形态</li></ul><p>因此，我们需要用 <code>be</code> 动词的单三形态 <code>is</code>，同时还需要 <code>being</code> 作为 <code>V-ing</code> 部分，然后还需要 <code>deplete</code> 的过去分词 <code>depleted</code>。这是传统语法的「现在进行式被动语态」。</p><h3 id="未来时态"><a href="#未来时态" class="headerlink" title="未来时态"></a>未来时态</h3><blockquote><p>There <em>will be</em> a major election <em>in April</em>.</p></blockquote><ul><li>动作发生的时间段是 _下一个四月份_，这是一个特定的时间段，所以应该用简单式</li><li>这个时间段不包括现在这个时间点，且位于现在之后，所以应该用将来时态</li><li>这里不涉及到被动的语态，也不涉及到「正在发生」的含义，所以不需要额外的 <code>be</code></li></ul><p>因此，我们需要用 <code>will</code> 来表示将来时态，同时用 <code>be</code> 的原型，在这里表示「存在」的含义。这是传统语法的「一般将来式」。</p><blockquote><p>Don’t call me at <em>six tomorrow</em>. I <em>will</em> still <em>be</em> sleeping <em>then</em>.</p></blockquote><ul><li>动作发生的时间段是 _明早六点_，这是一个特定的时间段，退化为一个时间点，所以应该用简单式</li><li>这个时间段不包括现在这个时间点，且位于现在之后，所以应该用将来时态</li><li>这里不涉及到被动的语态，但不涉及到「正在发生」的含义，所以需要用 <code>be + V-ing</code> 的形态</li></ul><p>因此，我们需要用 <code>will</code> 来表示将来时态，用 <code>be</code> 动词的原型，同时接上 <code>sleep</code> 的现在分词 <code>sleeping</code>。这是传统语法的「将来进行式」。</p><blockquote><p>The building <em>will be</em> razed <em>next month</em>.</p></blockquote><ul><li>动作发生的时间段是 _下个月_，这是一个特定的时间段，所以应该用简单式</li><li>这个时间段不包括现在这个时间点，且位于现在之后，所以应该用将来时态</li><li>这里涉及到被动的语态，所以需要用 <code>be + V-ed</code> 的形态；但不涉及到「正在发生」的含义</li></ul><p>因此，我们需要用 <code>will</code> 来表示将来时态，用 <code>be</code> 动词的原型，同时接上 <code>raze</code> 的过去分词 <code>razed</code>。这是传统语法的「一般将来式被动语态」。</p><h2 id="完成式"><a href="#完成式" class="headerlink" title="完成式"></a>完成式</h2><p>完成式也有几个重要的特征：</p><ul><li><strong>完成式的动作，其发生的时间有一个明确的截止时间点，表示「在这之前」或者「至此为止」</strong></li><li><strong>如果这个时间点</strong><ul><li>是「现在」这个时间点，那么用现在时态</li><li>是「过去」的某个时间点，那么用过去时态</li><li>是「将来」的某个时间点，那么用将来时态</li></ul></li></ul><p>第一个特征，给了我们明确的信息来确定我们是否应该使用完成式（而不是简单式）。第二个特征，则为我们选择时态提供了依据。</p><h3 id="现在时态-1"><a href="#现在时态-1" class="headerlink" title="现在时态"></a>现在时态</h3><blockquote><p>I’m sure that I <em>have seen</em> this face somewhere.</p></blockquote><ul><li>动作发生的时间不是一个特定的时间段，但有明确的截止时间点，所以应该用完成式</li><li>截止时间点是「现在」，所以应该用现在时态</li><li>这里不涉及到被动的语态，也不涉及到「持续」或者「正在发生」的含义，所以不需要额外的 <code>be</code> 动词</li></ul><p>因此，我们需要用 <code>have</code> 来表示完成时态，接上 <code>see</code> 的过去分词 <code>seen</code>。这是传统语法的「现在完成式」。</p><blockquote><p>We <em>have been</em> working overtime <em>for a week</em> to fill your order.</p></blockquote><ul><li>动作发生的时间不是一个特定的时间段，但有明确的截止时间点（_至今已有一周_），所以应该用完成式</li><li>截止时间点是「现在」，所以应该用现在时态</li><li>这里不涉及到被动的语态，但涉及到「持续」的含义，所以需要用 <code>be + V-ing</code> 的形式</li></ul><p>因此，我们需要用 <code>have</code> 来表示完成时态，接上 <code>be</code> 的过去分词 <code>been</code>，再加上 <code>work</code> 的现在分词 <code>working</code>。这是传统语法的「现在完成进行式」。</p><blockquote><p>The house <em>has been</em> redecorated twice since they moved in.</p></blockquote><ul><li>动作发生的时间不是一个特定的时间段，但有明确的截止时间点（_从他们搬入*_到现在为止***），所以应该用完成式</li><li>截止时间点是「现在」，所以应该用现在时态</li><li>这里涉及到被动的语态，所以需要用 <code>be + V-ed</code> 的形式；但不涉及到「持续」的含义</li></ul><p>因此，我们需要用 <code>have</code> 的单三形式 <code>has</code> 来表示完成时态，接上 <code>be</code> 的过去分词 <code>been</code>，在加上 <code>redecorate</code> 的过去分词 <code>redecorated</code>。这是传统语法的「现在完成式被动语态」。</p><h3 id="过去时态-1"><a href="#过去时态-1" class="headerlink" title="过去时态"></a>过去时态</h3><p>一般来说，没有特别说明之时，说「在这之前」就是「在现在这个时间点之前」，所以需要用现在完成式。如果要用过去完成式，则需要有一个明确的过去时间截止点。</p><blockquote><p>Many soldiers <em>had died</em> from pneumonia <em>before the discovery of Penicilin</em>.</p></blockquote><ul><li>动作发生的时间不是一个特定的时间段，但有明确的截止时间点（_青霉素被发现之前_），所以应该用完成式</li><li>截止时间点是「过去」，所以应该用过去时态</li><li>这里不涉及到被动的语态，也不涉及到「持续」或「正在发生」的含义，所以不需要用额外的 <code>be</code> 动词</li></ul><p>因此，我们需要用 <code>have</code> 的过去式 <code>had</code> 表示过去完成式，接上 <code>die</code> 的过去分词 <code>died</code> 表示实际的动作。这是传统语法的「过去完成式」。</p><blockquote><p>I <em>had been</em> smoking three packs of cigarettes a day <em>before I decided to quit</em>.</p></blockquote><ul><li>动作发生的时间不是一个特定的时间段，但有明确的截止时间点（_我决定戒烟之前_），所以应该用完成式</li><li>截止时间点是「过去」，所以应该用过去时态</li><li>这里不涉及到被动的语态，但涉及到「持续」的含义，所以需要用 <code>be + V-ing</code> 的形式</li></ul><p>因此，我们需要用 <code>have</code> 的过去式 <code>had</code> 表示过去完成式，接上 <code>be</code> 的过去分词 <code>been</code> 表示进行状态，最后加上 <code>smoke</code> 的现在分词 <code>smoking</code> 来表示实际的动作。这是传统语法的「过去完成进行式」。</p><blockquote><p>In the World War II, Japan <em>had not been</em> defeated yet <em>by the time Germany surrendered unconditionally</em>.</p></blockquote><ul><li>动作发生的时间不是一个特定的时间段，但有明确的截止时间点（_德国无条件投降之前_），所以应该用完成式</li><li>截止时间点是「过去」，所以应该用过去时态</li><li>这里涉及到被动的语态，所以需要用 <code>be + V-ed</code> 的形式；但不涉及到「持续」或「正在发生」的含义</li></ul><p>因此，我们需要用 <code>have</code> 的过去式 <code>had</code> 表示过去完成式，接上 <code>be</code> 的过去分词 <code>been</code> 表示被动，最后加上 <code>defeat</code> 的现在分词 <code>defeated</code> 来表示实际的动作。这是传统语法的「过去完成式被动语态」。</p><h3 id="将来时态"><a href="#将来时态" class="headerlink" title="将来时态"></a>将来时态</h3><p>和完成式的过去时态一样，将来时态中的完成式需要一个位于将来的时间截止点。</p><blockquote><p>Next April, I <em>will have worked</em> here for 2 years.</p></blockquote><ul><li>动作发生的时间不是一个特定的时间段，但有明确的截止时间点（_到下个四月为止_），所以应该用完成式</li><li>截止时间点是「将来」，所以应该用将来时态</li><li>这里不涉及到被动的语态，也不涉及到「持续」或「正在发生」的含义，所以不需要用额外的 <code>be</code> 动词</li></ul><p>因此，我们需要用 <code>will have</code> 表示将来完成式，接上 <code>work</code> 的过去分词 <code>worked</code> 表示实际的动作。这是传统语法的「将来完成式」。</p><blockquote><p>Come back at 17:00. Your car <em>will have been</em> fixed <em>by then</em>.</p></blockquote><ul><li>动作发生的时间不是一个特定的时间段，但有明确的截止时间点（_下午五点之前_），所以应该用完成式</li><li>截止时间点是「将来」，所以应该用将来时态</li><li>这里涉及到被动的语态，所以需要用 <code>be + V-ed</code> 的形式；但不涉及到「持续」或「正在发生」的含义</li></ul><p>因此，我们需要用 <code>will have</code> 表示将来完成式，接上 <code>be</code> 的过去分词 <code>been</code> 表示被动，再加上 <code>fix</code> 的过去分词 <code>fixed</code> 表示实际的动作。这是传统语法的「将来完成式被动语态」。</p><blockquote><p><em>In another two more minutes</em>, she <em>will have been</em> talking on the phone for three hours.</p></blockquote><ul><li>动作发生的时间不是一个特定的时间段，但有明确的截止时间点（_到两分钟之后_），所以应该用完成式</li><li>截止时间点是「将来」，所以应该用将来时态</li><li>这里不涉及到被动的语态，但不涉及到「持续」的含义，所以需要用 <code>be + V-ing</code> 的形式</li></ul><p>因此，我们需要用 <code>will have</code> 表示将来完成式，接上 <code>be</code> 的过去分词 <code>been</code> 表示进行，再加上 <code>talk</code> 的现在分词 <code>talking</code> 表示实际的动作。这是传统语法的「将来完成进行式」。</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语语法（二）：名词短语</title>
      <link href="posts/4da21885/"/>
      <url>posts/4da21885/</url>
      
        <content type="html"><![CDATA[<p>语法是语言的规范，制定语法的目的是为了让表达清晰、意思完整、不致有歧义。人类活动中的情形千差万别，为了表达清晰等目的，会形成许多特例。因此如果尝试通过列举语法现象及特例来描述语法，可想见是非常繁琐的，并且这种行为有舍本逐末之嫌。</p><p>在看过旋元佑先生写的《语法俱乐部》之后，我更坚定了这个想法，并尝试将自己对该书的理解结合自己的经验和思考写出来，成为一个系列。</p><p>这是这个系列的第二篇，主要讨论名词短语以及冠词的使用。</p><h2 id="名词短语的基本形态"><a href="#名词短语的基本形态" class="headerlink" title="名词短语的基本形态"></a>名词短语的基本形态</h2><p>名词短语可以充当句子中的主语、宾语、补语等成分，出现的频率相当高。同时，在名词短语中充当限定词的冠词涉及到许多规则，也是容易弄错的地方。涉及到名词短语的语法规则有很多，特例也有很多。基本属于「有二十条规则，又有二十条特例」的情况，令人烦不胜烦。但其实，在表达清晰、意思完整、无有歧义的要求下，这些规则并不需要死记硬背，借由客观地讨论就能形成完整的体系。</p><p>完整的名词短语由三个部分组成：限定词、修饰词、名词。比如（下划线部分是限定词，加粗部分是修饰词）：</p><ul><li><u>a</u> <strong>new</strong> book.</li><li><u>many</u> <strong>good</strong> students.</li><li><u>his</u> <strong>beautiful</strong> wife.</li><li><u>the</u> <strong>bast</strong> answer.</li><li><u>those</u> <strong>sweet</strong> roses.</li></ul><p>名词短语的三个部分并非每一次都要同时出现，在特定场合下，这三个部分都有可能省略。</p><p>修饰词可能是名词短语中最不重要的部分，如果不需要描述名词的状态特征则完全可以省略。比如「a book」同样是正确的名词短语。如果说话人确信听众知道自己在讨论什么东西，则名词也可以省略。比如「Of those answers, this one is the best.」，这里的「the best」指得就是「the best answer」。在面对面交流的时候，修饰词和名词有时甚至可以一起省略。假设你在花店，用手指向一捧玫瑰花，对花店老板说「I want those.」的话，花店老板很清楚你想要什么。</p><h2 id="限定词"><a href="#限定词" class="headerlink" title="限定词"></a>限定词</h2><p>任何事物出现都是有原因的，那么英语里为什么要有限定词呢？限定词作为名词短语的一部分存在，而名词短语的主体是名词。所以在讨论限定词之前，有必要讨论一下名词。</p><h3 id="名词的分类"><a href="#名词的分类" class="headerlink" title="名词的分类"></a>名词的分类</h3><p>从名词指代的对象来说，名词可以分为「抽象名词」和「普通名词」。抽象名词指代的对象看不见摸不着，通常表示方式方法、状态品质等概念。普通名词则相反，它们指代的对象看得见摸得着，是实际存在的事物。</p><p>从名词是否可以计数的方面，名词可以分为「可数名词」和「不可数名词」。可数名词指代的对象通常具有固定的形体，因此可以计数。不可数名词则正好相反，它们指代的对象通常无有固定形体，因此你没法拿起其中的「一个」，对朋友说「嘿，这是一个XX，你手边上也有一个」。</p><p>从名词指代的对象的状态来说，名词可以分成「专有名词」和「非专有名词」。所谓专有名词，就是名词指代的对象，天上地下独一份，没有第二个。而非专有名词则正好相反，它们指代的对象都不止存在一个。</p><p>抽象名词指代的对象显然不具有固定的形体或者明确的界限，因此<strong>抽象名词都是不可数名词</strong>。反过来，它的逆否命题显然成立，<strong>可数名词都是普通名词</strong>。</p><p>名词是否专有，是在可数名词的范围之内进行讨论的。因为如果名词不可数，也就无从定义「只有一个」，从而讨论是否专有就没有意义了。此外，名词是否专有，有时也要依情况而定。比如，医院都有院长，在医院内部讨论的时候，院长是唯一的，此时可以看做是专有名词；而在医院之间讨论，或者横向比较的时候，院长就不唯一了，此时是非专有名词。</p><p>对名词做这样的分类是有意义的。如果一个名词是可数的，并且它是非专有名词，这就意味着它指代的对象在世界上并不唯一，有许多个。以对于「书本」的讨论为例。如果笼统地讨论而不加限定，那么听者就不知道讲话者说得是什么——究竟是说所有的书本组成的这个整体，还是说某一本特定的书呢？显然，对于这样的名词，在讨论的时候需要加以限定，这就是限定词存在的意义。</p><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>我们继续上面关于成分省略的话题。如果我们将「many good students」的限定词 many 去掉，形成的「good students」仍然是一个正确的名词短语。但是，将「a new book」的限定词 a 去掉，形成的「new book」就不正确了。</p><p>我们对两个短语进行了同样的操作，但是结果却不相同。按照上一小节的讨论，学生和书本都是非专有名词。这种情况下，作为复数存在的 students 表意是明确的，它表示学生这个群体；而作为单数存在的 book 表意就不明确了。</p><h3 id="冠词的使用"><a href="#冠词的使用" class="headerlink" title="冠词的使用"></a>冠词的使用</h3><p>限定词有很多，我们先简单地看一下。</p><ul><li>冠词：a, an, the</li><li>表示指代：this, that, these, those</li><li>所有格：my, your, his, her, their, Jason’s</li><li>表示否定：no, neither</li><li>表示全部：every, each</li><li>表示不确定：some, any, either</li><li>表示数量：基数词、序数词以及 many, much, little, few</li><li>表示数量的范围、倍数等：all, both, half, one-third, double, twice, three times, such 等</li></ul><p>行文时有关限定词的错误，要么是漏掉限定词，要么是限定词误用。除掉冠词之外的其余几类限定词都有相对明确的含义，在实际使用中不容易出错。所以我们只需要着重讨论冠词就可以。</p><p>从语源学（etymology）的角度说，不定冠词 a(n) 以及定冠词 the 分别是数次 one 和指示代词 that 和 those 的弱化。也就是说，a(n) 就是 one 的意思，the 就是 that 或者 those 的意思，只不过语气上比较弱。</p><p>因此，当后面的名词在叙述上有「一个」的含义时，应该加上不定冠词；当后面的名词在上下文有特指「那个」的时候，应该加上不定冠词；当后面的名词不适合以「一个」或「那个」来交代，就不加冠词。</p><p>举例分析如下：</p><ul><li><p><u>Unmaried men</u> are a rare species these days.</p><ul><li>名词短语 Unmaried men 中 men 是复数形态，没法说「一个」或者「那个」，所以不用冠词。</li></ul></li><li><p><u>Honesty</u> is necessarily the best policy.</p><ul><li>Honesty 是表达品质的抽象名词，没有复数形态，不能用「一个」来描述，所以不用冠词。</li></ul></li><li><p><u>Fresh water</u> is a precious resource in Saudi Arabia.</p><ul><li>Fresh water 是不可数的，没有复数形态，不能用「一个」来描述，所以不用冠词。</li></ul></li><li><p>I have an appointment on <u>Sunday</u>.</p><ul><li>这里 Sunday 在讨论范围内是唯一的，确指这周日，是专有名词，不能用「一个」或者「那个」来描述，所以冠词位置留空。</li></ul></li><li><p>I would have an appointment on <u>a Sunday</u> next month.</p><ul><li>这里 Sunday 在讨论范围内（下个月）里是不唯一的，因此要保留冠词。</li></ul></li><li><p>I need <u>a book</u> to read on my trip. I have finished <u>the book</u> you lent me.</p><ul><li>第一句中，a book 不做特指，「随便哪一本书我都乐意读」，因此用不定冠词。</li><li>第二句中，the book 特指「你借给我的那一本」，上下文中有暗示的「那个」，所以用定冠词。</li></ul></li><li><p><u>Modern history</u> is my favorite subject. <u>The history of recent China</u> is a sorry record.</p><ul><li>第一句中，modern history 是抽象名词，没有办法用「一个」或者「那个」来表述，所以冠词位留空。</li><li>第二句中，因为特指「中国的『那一段』历史」，所以要用定冠词。</li></ul></li><li><p>He should be home; I saw <u>a light</u> in his house. Turn off <u>the portal light</u>.</p><ul><li>第一句中，屋子里的灯可能不止一盏，所以不适合用「那个」来表述，只能用不定冠词。</li><li>第二局中，等特指门口的「那一盏」，所以用定冠词。</li></ul></li><li><p><u>Genghis Khan</u> is <u>hero</u>.</p><ul><li>这里 Genghis Khan 是成吉思汗，古今就这一位，是专有名词。如果用「一个」来描述，就表示还有另一个成吉思汗，这不合适，所以冠词位置留空。对于短语 hero 来说，它在句中是 Genghis Khan 的补语，和 Genghis Khan 等同，因此也应当做专有名词来对待。</li></ul></li><li><p>Someone said that Genghis Khan is <u>a greater hero</u> than Napoleon.</p><ul><li>这里的名词短语 a greater hero 同样是 Genghis Khan 的补语，二者地位等同，但是却没有当做专有名词来处理。这是因为后面还出现了拿破仑，此时 hero 就不唯一了，所以必须加冠词。</li></ul></li><li><p><u>The five-year-old Genghis Khan</u> was a breezy boy.</p><ul><li>成吉思汗只有一个，但是句中特指「五岁的『那个』成吉思汗」，将成吉思汗的一生展开讨论，于是有了多个时期的成吉思汗。此时成吉思汗不再作为专有名词，又因为讨论时特指「那个」，所以要加上定冠词。</li></ul></li><li><p>I always go to school by <u>bus</u>.</p><ul><li>Bus 本是个可数的普通名词，按理应加上冠词。但是这里出现在介词 by 之后，表示方式手段，意思是「坐车这种方式」，是抽象名词。这里的 bus 没办法用「一个」或者「那个」去理解，所以冠词位置留空。</li></ul></li><li><p><u>the Pacific Ocean</u></p><ul><li>「太平洋是专有名词，但是一个特例，要加上定冠词」，这是一般语法书的论调。但事实上，如果把 the Pacific Ocean 理解为「叫做 Pacific 的『那个』海洋」的话，就不需要背这个特例了，加定冠词也就显而易见了。</li></ul></li></ul><p>这篇文章不做类似「专有名词前面不加冠词」或是「抽象名词前面不加冠词」之类的总结。因为如你所见，一个名词是否是专有名词或者抽象名词，是需要依情况而定的。如例子里的成吉思汗，尽管它在大多数情况下是专有名词，但是在某些讨论中，它也可以是非专有名词。对这些规则的死记硬背通常导致不加思考的「错误套用」，更将引出无数例外，实不可取。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>名词短语包括限定词、修饰词和名词三个部分。任一部分在合适的情况下都可以省略。</li><li>名词短语中没有冠词限定的情况，是因为名词在上下文中不适合理解为「一个」或者「那个」。</li><li>a(n) 和 the 分别是 one 和 that/those 的弱化。</li></ul><p>这些规律在理解的基础上是很自然的，不需要死记硬背。吃透文章中的这些分析，足以涵盖「二十条规则和二十条例外」的语法细则。</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语语法（一）：基本句型、动词分类、补语</title>
      <link href="posts/6a9c0e64/"/>
      <url>posts/6a9c0e64/</url>
      
        <content type="html"><![CDATA[<p>语法是语言的规范，制定语法的目的是为了让表达清晰、意思完整、不致有歧义。人类活动中的情形千差万别，为了表达清晰等目的，会形成许多特例。因此如果尝试通过列举语法现象及特例来描述语法，可想见是非常繁琐的，并且这种行为有舍本逐末之嫌。</p><p>在看过旋元佑先生写的《语法俱乐部》之后，我更坚定了这个想法，并尝试将自己对该书的理解结合自己的经验和思考写出来，成为一个系列。</p><p>这是这个系列的第一篇，主要讨论动词分类与补语的关系。</p><h2 id="基本句型"><a href="#基本句型" class="headerlink" title="基本句型"></a>基本句型</h2><p>英语中的基本句型有五种：</p><ol><li>S + V</li><li>S + V + O</li><li>S + V + C</li><li>S + V + O + O</li><li>S + V + O + C</li></ol><p>从意思上说，一个完整句子表达的无非是「一个人/一个东西怎么样了」。这里「一个人/一个东西」称为主语部分（subject），告诉人们「这个句子讨论的是『一个人或者一个东西』」；「怎么样了」称为谓语部分（predicate，也称「述语部分」），它可以是「做了什么事情」或者「具有某种特性」。主语部分形式比较单一，通常由名词性的结构来担任。谓语部分的形式变化较多，五种基本句型实际就是通过不同的谓语部分结构来表达五种类型的含义。</p><p>不过，不管谓语部分如何变化，它都由动词起头，并承担主要的表意功能。因此讨论基本句型就有必要讨论谓语动词。</p><h2 id="动词的特性及分类"><a href="#动词的特性及分类" class="headerlink" title="动词的特性及分类"></a>动词的特性及分类</h2><p>动词的特性分成两个部分。其一是「是否及宾（transitive/intransitive）」，其二是「是否完全（complete/incomplete）」。</p><h3 id="及宾与不及宾"><a href="#及宾与不及宾" class="headerlink" title="及宾与不及宾"></a>及宾与不及宾</h3><p>第一个特性是从动词意思的层面上说的。如果一个动词和其他人或事物没有关系，那它就是不及宾动词；而如果一个动词被做出来必须有一个承担者，那它就是及宾动词。</p><ul><li>His father <em>died</em> in the war.</li><li>His father had <em>killed</em> three enemy soldiers before his father died in the war.</li></ul><p>例子中的 die 表示「死亡」，是一个不及宾动词。这是因为死亡这个动作只与他的父亲有关，和别人无关——他的父亲一个人就可以执行死亡这个动作了。不及宾动词后面不能与作为受词的宾语（object）直接相连。</p><p>例子中的 kill 表示「杀死」，是一个及宾动词。这是因为杀死这个动作必须有一个承受者（在句子中就是受词）——如果句子去掉 kill 的宾语，变成 <code>His father had *killed* before his father died in the war.</code> 的话，句意就不完整了。及宾动词后面必须有作为受词的宾语。</p><h3 id="完全与不完全"><a href="#完全与不完全" class="headerlink" title="完全与不完全"></a>完全与不完全</h3><p>第二个特性是从表意功能上说的。如果一个谓语动词在句子当中只能起到连接主语和谓语部分的后续结构的作用，而在表意上功能不完全，则这个动词就是「不完全」的；反之若谓语动词能够完整地表意，那它就是「完全」的。</p><p>判断动词是否完全比判断动词是否及宾要容易许多。不完全的动词有一个非常明显的特征——它们都是判断动词「是」的变形，都表示某种意义上的「是」。举例如下：</p><ul><li>I am a boy.</li><li>The soup tastes pretty good.</li><li>That man looks weak.</li></ul><p>三个句子中的动词「am」、「taste」、「look」都是不完全的动词，它们分别译作「是」、「尝起来是」、「看起来是」。如果把他们后面的内容去掉，变成：</p><ul><li>I am.</li><li>The soup tastes.</li><li>That man looks.</li></ul><p>句子表意就不完整了。「我是」，我究竟是什么呢？「汤尝起来」，究竟怎么样呢？「那个男人看起来」，究竟怎么了？</p><p>总而言之，不完全的动词在句子当中都是判断动词「是」的变形，在句子当中起到连接主语和谓语部分其他内容的作用，但表意功能弱。因此，这些动词被称为「联系动词（Link-verb）」。也因此，当这些句子出现在句中的时候，需要有称为补语的部分将表意功能补足。</p><p>英语中，除去「be」之外，常见的联系动词有：</p><ul><li>look 看起来是</li><li>seem 似乎是</li><li>appear 显得像是</li><li>sound 听起来是</li><li>feel 摸起来像是</li><li>taste 尝起来是</li><li>stay 仍然是</li><li>remain 依旧是</li><li>turn 转变为</li><li>prove 证实为</li><li>become 成为</li><li>make 作为</li></ul><h2 id="补语"><a href="#补语" class="headerlink" title="补语"></a>补语</h2><p>补语是和表意不完全的动词息息相关的。在第三种基本句型中，联系动词将主语和补语在某个意义层面上对等起来。</p><p>我们先来讨论主语的补语，而后将宾语的补语作为一种变形来讨论。</p><h3 id="主语的补语-S-V-C"><a href="#主语的补语-S-V-C" class="headerlink" title="主语的补语 S + V + C"></a>主语的补语 S + V + C</h3><p>在前一节的讨论中，我们已经见过补语这个结构了。为了更清晰地讨论补语，我们尝试将主语统一。</p><ul><li>The dog was a mastiff.</li><li>The dog was mean.</li><li>The dog was there.</li></ul><p>在这里，「a mastiff」、「mean」和「there」分别是三句话的补语，他们分别是名词、形容词和方位副词。</p><p>在这里，第一句话翻译为「这只狗是一只獒」，可以明显看到判断动词的存在；第二句话翻译成「这只狗很凶」，判断动词不见了。这实际上是翻译上作出的调整。第二个句子逐字翻译（Verbatim Translation）的结果应该是「这只狗是凶恶的」，但这不符合汉语的说话习惯。这个事实从另一个角度说明了，联系动词表意上是不完全的，在翻译上甚至可以将它们丢掉。</p><p>另一方面，尝试将下面句子中的联系动词替换为相应的「be」动词，我们会发现，这些句子的表意基本没有发生变化。这也说明，联系动词在表以上是不完全的。</p><ul><li>The house <em>looks</em> big.</li><li>The question <em>seems</em> easy.</li><li>The man <em>appears</em> to be a gentleman.</li><li>The music <em>sounds</em> of equanimity.</li><li>The book <em>feels</em> old.</li><li>The soup <em>tastes</em> hot.</li><li>This two men <em>stayed</em> friends for their whole life.</li><li>The woman <em>remains</em> single.</li><li>The player <em>turned</em> professional.</li><li>The drug <em>proved</em> effective.</li><li>The little boy <em>became</em> a super star.</li><li>A nurse <em>makes</em> a good wife.</li></ul><h3 id="宾语的补语-S-V-O-C"><a href="#宾语的补语-S-V-O-C" class="headerlink" title="宾语的补语 S + V + O + C"></a>宾语的补语 S + V + O + C</h3><p>主语的补语用来表示主语是什么。类似地，宾语的补语用来表示宾语是什么。在 S + V + O + C 这个句型当中，宾语和补语之间虽然没有动词存在。但是句子可以变形成：S + V + that + O + V + C 的形式，也就是将原本的宾语和补语以从句的形式出现。因此，可以认为宾语和补语之间有「隐藏的」判断动词「是」的存在。</p><p>上一小节的最后，我们举出了 12 个主语补语的句子，我们可以按照下面的方法轻易地变成宾语补语的句子。</p><ul><li>The house <em>looks</em> big.</li><li>I found that the house <em>looks</em> big.</li><li>I found the house big.</li></ul><p>这也说明了主语补语和宾语补语之间的关系。</p><h3 id="补语的词类"><a href="#补语的词类" class="headerlink" title="补语的词类"></a>补语的词类</h3><p>除了前述的名词和形容词性结构可以充当补语之外，表示方位的副词也可以充当补语。比如：</p><ul><li>The car is there.</li><li>I find the key here.</li></ul><p>这里，表示方位的副词「there」和「here」分别作为「The car」和「the key」的补语。</p><h2 id="额外的内容"><a href="#额外的内容" class="headerlink" title="额外的内容"></a>额外的内容</h2><h3 id="特殊的-be-动词"><a href="#特殊的-be-动词" class="headerlink" title="特殊的 be 动词"></a>特殊的 be 动词</h3><p>一些情况下，be 动词后面不带补语。我们知道 be 动词表示「是」的时候不带补语是表意不完全的，因此这些不带补语的 be 动词并不是系动词，而是作为有实际意义的动词，表示「存在」。</p><p>比如，被认为是现代哲学开端的笛卡尔先生的名言「我思故我在」中的 be 动词：I think; therefore I am.</p><p>又比如，莎翁名作《哈姆雷特》中，王子哈姆雷特在母亲与叔父通奸害死父王之后思考人生的名句：To be or not to be, that is the question. 这里的 be 也应该理解为存在，引申为「活着」，翻译为「要不要活下去，这是个问题」。</p><h3 id="S-V-O-O-与-S-V-O-C"><a href="#S-V-O-O-与-S-V-O-C" class="headerlink" title="S + V + O + O 与 S + V + O + C"></a>S + V + O + O 与 S + V + O + C</h3><p>这是两组结构相似的基本句型，对一些中国学生来说，辨识起来稍有困难。我们知道，五种基本句型的区别在于谓语部分的差别，而谓语部分的差别实际上是谓语动词的差别引起的。所以为了在这两种句型中作出辨析，就应着重探讨谓语动词的特征。</p><p>先看两个例子。</p><ul><li>Jason’s wife gave him a jar of honey.</li><li>Jason’s wife called him honey.</li></ul><p>这里前句是一个 S + V + O + O 的句型，后句是一个 S + V + O + C 的句型。</p><p>前句的谓语动词「give」首先是一个及宾动词，因为必须要「把什么东西给出去」。其次，它还必须有一个额外的接收者，因为必须要有人接受，东西才给得出去。所以，动词 give 出现，就必须有两个宾语来承受这个动作，因此是 S + V + O + O 的句型。此外，「him」和「a jar of honey」中不存在对等的概念，也即没有「He is a jar of honey」的意味在其中，所以这不可能是宾语和补语的关系。</p><p>后句中，「him」和「honey」隐含着对等的概念，所以这是一个 S + V + O + C 的句型。</p><h3 id="表语还是补语？"><a href="#表语还是补语？" class="headerlink" title="表语还是补语？"></a>表语还是补语？</h3><p>文首列出的第三种基本句型，在中国大陆地区通常称为「主系表结构」。主语和系动词很好理解，那么表语是什么？</p><p>在大陆地区的语法书中，表语是这样定义的：</p><blockquote><p>表语是用来表明主语的身份、性质、品性、特征和状态的，表语常由名词、形容词、副词、介词短语、不定式、动词的-ing、从句来充当，它常位于系动词的后面。</p></blockquote><p>显而易见，它就是我们讨论中所言的「主语的补语」，二者是相同的概念。</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
